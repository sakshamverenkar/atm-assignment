const React = require('react');
const {
  Text,
  Box,
  useInput
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [inputFields, setInputFields] = useState([{
    inputText: '',
    outputText: ''
  }]);
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    // console.log("currentInput", currentInput, typeof currentInput);
    // console.log("useInput handler called input", input)
    // console.log("useInput handler called key", key)

    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const updateDataInState = inputStr => {
    console.log("currentInput called line 32", inputStr);
    console.log("currentInput called line 32", inputStr.includes('login'));
    switch (inputStr) {
      case inputStr.includes('login'):
        console.log("in login");
        break;
      case inputStr.includes('logout'):
        console.log("in logout");
        break;
      case inputStr.includes('deposit'):
        console.log("in deposit");
        break;
      case inputStr.includes('transfer'):
        console.log("in trasnfer");
        break;
      default:
        console.log("in break");
    }
  };
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), inputFields.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiQXBwIiwibmFtZSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiaW5wdXRGaWVsZHMiLCJzZXRJbnB1dEZpZWxkcyIsImlucHV0VGV4dCIsIm91dHB1dFRleHQiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsImxlZnRBcnJvdyIsInJldHVybiIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGVEYXRhSW5TdGF0ZSIsImlucHV0U3RyIiwiaW5jbHVkZXMiLCJtYXAiLCJmaWVsZCIsImluZGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBUZXh0LCBCb3gsIHVzZUlucHV0IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cbmNvbnN0IEFwcCA9ICh7bmFtZSA9ICdTdHJhbmdlcid9KSA9PiB7XG5cdGNvbnN0IHt1c2VFZmZlY3QsIHVzZVN0YXRlfSA9IFJlYWN0O1xuXHRjb25zdCBbaW5wdXRGaWVsZHMsIHNldElucHV0RmllbGRzXSA9IHVzZVN0YXRlKFt7XG5cdFx0aW5wdXRUZXh0OiAnJyxcblx0XHRvdXRwdXRUZXh0OiAnJ1xuXHR9XSk7XG5cdGNvbnN0IFtjdXJyZW50SW5wdXQsIHNldEN1cnJlbnRJbnB1dF0gPSB1c2VTdGF0ZSgnJyk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcImN1cnJlbnRJbnB1dFwiLCBjdXJyZW50SW5wdXQsIHR5cGVvZiBjdXJyZW50SW5wdXQpO1xuXHRcdC8vIGNvbnNvbGUubG9nKFwidXNlSW5wdXQgaGFuZGxlciBjYWxsZWQgaW5wdXRcIiwgaW5wdXQpXG5cdFx0Ly8gY29uc29sZS5sb2coXCJ1c2VJbnB1dCBoYW5kbGVyIGNhbGxlZCBrZXlcIiwga2V5KVxuXG5cblx0XHRpZiAoa2V5LmxlZnRBcnJvdykge1xuXHRcdFx0Ly8gTGVmdCBhcnJvdyBrZXkgcHJlc3NlZFxuXHRcdH1cblxuXHRcdGlmKGtleS5yZXR1cm4pIHtcblx0XHRcdGNvbnNvbGUubG9nKFwicnR1cm4ga2V5IHdhcyBwcmVzc2VkXCIsIGN1cnJlbnRJbnB1dClcblx0XHRcdHVwZGF0ZURhdGFJblN0YXRlKGN1cnJlbnRJbnB1dClcblx0XHR9XG5cblx0fSk7XG5cblx0Y29uc3QgIHVwZGF0ZURhdGFJblN0YXRlID0gKGlucHV0U3RyKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coXCJjdXJyZW50SW5wdXQgY2FsbGVkIGxpbmUgMzJcIiwgaW5wdXRTdHIpXG5cdFx0Y29uc29sZS5sb2coXCJjdXJyZW50SW5wdXQgY2FsbGVkIGxpbmUgMzJcIiwgaW5wdXRTdHIuaW5jbHVkZXMoJ2xvZ2luJykpO1xuXHRcdHN3aXRjaCAoaW5wdXRTdHIpIHtcblx0XHRcdGNhc2UgaW5wdXRTdHIuaW5jbHVkZXMoJ2xvZ2luJyk6XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gbG9naW5cIilcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIGlucHV0U3RyLmluY2x1ZGVzKCdsb2dvdXQnKTpcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBsb2dvdXRcIilcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIGlucHV0U3RyLmluY2x1ZGVzKCdkZXBvc2l0Jyk6XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gZGVwb3NpdFwiKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgaW5wdXRTdHIuaW5jbHVkZXMoJ3RyYW5zZmVyJyk6XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gdHJhc25mZXJcIilcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGJyZWFrXCIpXG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfT5cblx0XHRcdDxCb3ggYm9yZGVyU3R5bGU9XCJyb3VuZFwiIGJvcmRlckNvbG9yPVwiZ3JlZW5cIj5cblx0XHRcdFx0PFRleHQ+V2VsY29tZSA8L1RleHQ+XG5cdFx0XHQ8L0JveD5cblx0XHRcdHtpbnB1dEZpZWxkcy5tYXAoKGZpZWxkLCBpbmRleCk9PiB7XG5cdFx0XHRcdHJldHVybihcblx0XHRcdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfVxuXHRcdFx0XHRcdFx0IGtleT17aW5kZXh9PlxuXHRcdFx0XHRcdDxUZXh0SW5wdXRcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPXsnJ31cblx0XHRcdFx0XHRcdHZhbHVlPXtjdXJyZW50SW5wdXR9XG5cdFx0XHRcdFx0XHRvbkNoYW5nZT17c2V0Q3VycmVudElucHV0fVxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQ8VGV4dD57ZmllbGQub3V0cHV0VGV4dH08L1RleHQ+XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdClcblx0XHRcdH0pfVxuXG5cblx0XHQ8L0JveD5cblxuXHQpXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsSUFBSTtFQUFFQyxHQUFHO0VBQUVDO0FBQVMsQ0FBQyxHQUFHSCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQzlDLE1BQU1JLFNBQVMsR0FBR0osT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUNLLE9BQU87QUFFbkQsTUFBTUMsR0FBRyxHQUFHLENBQUM7RUFBQ0MsSUFBSSxHQUFHO0FBQVUsQ0FBQyxLQUFLO0VBQ3BDLE1BQU07SUFBQ0MsU0FBUztJQUFFQztFQUFRLENBQUMsR0FBR1YsS0FBSztFQUNuQyxNQUFNLENBQUNXLFdBQVcsRUFBRUMsY0FBYyxDQUFDLEdBQUdGLFFBQVEsQ0FBQyxDQUFDO0lBQy9DRyxTQUFTLEVBQUUsRUFBRTtJQUNiQyxVQUFVLEVBQUU7RUFDYixDQUFDLENBQUMsQ0FBQztFQUNILE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxlQUFlLENBQUMsR0FBR04sUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUVwRE4sUUFBUSxDQUFDLENBQUNhLEtBQUssRUFBRUMsR0FBRyxLQUFLO0lBQ3hCO0lBQ0E7SUFDQTs7SUFHQSxJQUFJQSxHQUFHLENBQUNDLFNBQVMsRUFBRTtNQUNsQjtJQUFBO0lBR0QsSUFBR0QsR0FBRyxDQUFDRSxNQUFNLEVBQUU7TUFDZEMsT0FBTyxDQUFDQyxHQUFHLENBQUMsdUJBQXVCLEVBQUVQLFlBQVksQ0FBQztNQUNsRFEsaUJBQWlCLENBQUNSLFlBQVksQ0FBQztJQUNoQztFQUVELENBQUMsQ0FBQztFQUVGLE1BQU9RLGlCQUFpQixHQUFJQyxRQUFRLElBQUs7SUFDeENILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDZCQUE2QixFQUFFRSxRQUFRLENBQUM7SUFDcERILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDZCQUE2QixFQUFFRSxRQUFRLENBQUNDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RSxRQUFRRCxRQUFRO01BQ2YsS0FBS0EsUUFBUSxDQUFDQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQzlCSixPQUFPLENBQUNDLEdBQUcsQ0FBQyxVQUFVLENBQUM7UUFDdkI7TUFDRCxLQUFLRSxRQUFRLENBQUNDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDL0JKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFdBQVcsQ0FBQztRQUN4QjtNQUNELEtBQUtFLFFBQVEsQ0FBQ0MsUUFBUSxDQUFDLFNBQVMsQ0FBQztRQUNoQ0osT0FBTyxDQUFDQyxHQUFHLENBQUMsWUFBWSxDQUFDO1FBQ3pCO01BQ0QsS0FBS0UsUUFBUSxDQUFDQyxRQUFRLENBQUMsVUFBVSxDQUFDO1FBQ2pDSixPQUFPLENBQUNDLEdBQUcsQ0FBQyxhQUFhLENBQUM7UUFDMUI7TUFDRDtRQUNDRCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxVQUFVLENBQUM7SUFBQTtFQUUxQixDQUFDO0VBRUQsb0JBQ0Msb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBRTtFQUFTLGdCQUM1QixvQkFBQyxHQUFHO0lBQUMsV0FBVyxFQUFDLE9BQU87SUFBQyxXQUFXLEVBQUM7RUFBTyxnQkFDM0Msb0JBQUMsSUFBSSxtQkFBZ0IsQ0FDaEIsRUFDTFgsV0FBVyxDQUFDZSxHQUFHLENBQUMsQ0FBQ0MsS0FBSyxFQUFFQyxLQUFLLEtBQUk7SUFDakMsb0JBQ0Msb0JBQUMsR0FBRztNQUFDLGFBQWEsRUFBRSxRQUFTO01BQzNCLEdBQUcsRUFBRUE7SUFBTSxnQkFDYixvQkFBQyxTQUFTO01BQ1QsV0FBVyxFQUFFLEVBQUc7TUFDaEIsS0FBSyxFQUFFYixZQUFhO01BQ3BCLFFBQVEsRUFBRUM7SUFBZ0IsRUFDekIsZUFDRCxvQkFBQyxJQUFJLFFBQUVXLEtBQUssQ0FBQ2IsVUFBVSxDQUFRLENBQzFCO0VBRVIsQ0FBQyxDQUFDLENBR0c7QUFHUixDQUFDO0FBRURlLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHdkIsR0FBRyJ9