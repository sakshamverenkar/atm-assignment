"use strict";

const React = require('react');
const {
  Text,
  Box,
  useInput,
  Newline
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const dummyInputData = [];
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState({});
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const getData = name => {
    name = name || currentName;
    return inputFields[name];
  };
  const createNewNameData = obj => {
    const {
      name,
      balance = 0,
      owedMoney = 0
    } = obj;
    return {
      [name]: {
        inputData: [{
          inputType: 'login',
          inputText: `login ${name}`,
          outputText: `Hello, ${name}! \nYour balance is ${balance}`
        }],
        balance: balance,
        owedMoney: owedMoney,
        owedTo: '',
        owedFrom: ''
      }
    };
  };
  const updateDataInState = inputStr => {
    let getDataFromState;
    if (inputStr.includes('login')) {
      const name = inputStr.split(' ')[1];
      if (!name) {
        return;
      }
      const getDataFromState = getData(name);
      if (!getDataFromState) {
        const createdData = createNewNameData({
          name
        });
        setInputFields({
          ...inputFields,
          ...createdData
        });
        setCurrentName(name);
        setCurrentInput('');
      }
      return 1;
    } else if (inputStr.includes('logout')) {
      getDataFromState = getData();
      const {
        inputData = []
      } = getDataFromState;
      const updatedData = [...inputData, {
        inputType: 'logout',
        inputText: inputStr,
        outputText: `Goodbye, ${currentName}!`
      }];
      if (!getDataFromState) {
        return;
      }
      getDataFromState.inputData = updatedData;
      setInputFields({
        ...inputFields,
        ...getDataFromState
      });
      setCurrentInput('');
      return 1;
    } else if (inputStr.includes('deposit')) {
      const depositAmount = Number(inputStr.split(' ')[1]);
      getDataFromState = getData();
      getDataFromState.balance += depositAmount;
      const {
        inputData = []
      } = getDataFromState;
      const updatedData = [...inputData, {
        inputType: 'deposit',
        inputText: inputStr,
        outputText: `Your balance is ${getDataFromState.balance}`
      }];
      if (!getDataFromState) {
        return;
      }
      getDataFromState.inputData = updatedData;
      setInputFields({
        ...inputFields,
        ...getDataFromState
      });
      setCurrentInput('');
      console.log("inputFields line 88 after upation loigut", inputFields);
      return 1;
    } else if (inputStr.includes('transfer')) {
      console.log("in transfer");
      const name = inputStr.split(' ')[1];
      const transferAmt = Number(inputStr.split(' ')[2]);
      console.log("name to transfer to", name);
      console.log("transferAmt", transferAmt);
      return 1;
    }
  };
  const currentData = getData();
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, currentData?.inputData?.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(Text, null, field.inputText), /*#__PURE__*/React.createElement(Text, null, field.outputText), /*#__PURE__*/React.createElement(Newline, null));
  })), /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(TextInput, {
    placeholder: '',
    value: currentInput,
    onChange: setCurrentInput
  })));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,