const React = require('react');
const {
  Text,
  Box,
  useInput,
  Newline
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState({
    'stranger': {
      inputData: [''],
      balance: 0,
      owedMoney: 0,
      owedTo: '',
      owedFrom: ''
    }
  });
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const updateDataInState = inputStr => {
    console.log("currentInput called line 32", inputStr);
    console.log("currentInput called line 33 inputStr.includes('login')", inputStr.includes('login'));
    console.log("currentInput called line 34 inputStr.indexOf('login') > -", inputStr.indexOf('login') !== -1);
    // switch (inputStr) {
    if (inputStr.includes('login')) {
      console.log("in login");
      return 1;
    } else if (inputStr.includes('logout')) {
      console.log("in logout");
      return 1;
    } else if (inputStr.includes('deposit')) {
      console.log("in deposit");
      return 1;
    } else if (inputStr.includes('transfer')) {
      console.log("in transfer");
      return 1;
    }
  };
  const currentData = inputFields[currentName];
  console.log("currentData", currentData);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), currentData?.inputData?.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Newline, null));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJOZXdsaW5lIiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIkFwcCIsIm5hbWUiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsImN1cnJlbnROYW1lIiwic2V0Q3VycmVudE5hbWUiLCJpbnB1dEZpZWxkcyIsInNldElucHV0RmllbGRzIiwiaW5wdXREYXRhIiwiYmFsYW5jZSIsIm93ZWRNb25leSIsIm93ZWRUbyIsIm93ZWRGcm9tIiwiY3VycmVudElucHV0Iiwic2V0Q3VycmVudElucHV0IiwiaW5wdXQiLCJrZXkiLCJsZWZ0QXJyb3ciLCJyZXR1cm4iLCJjb25zb2xlIiwibG9nIiwidXBkYXRlRGF0YUluU3RhdGUiLCJpbnB1dFN0ciIsImluY2x1ZGVzIiwiaW5kZXhPZiIsImN1cnJlbnREYXRhIiwibWFwIiwiZmllbGQiLCJpbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1aS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgVGV4dCwgQm94LCB1c2VJbnB1dCwgTmV3bGluZSB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoXCJpbmstdGV4dC1pbnB1dFwiKS5kZWZhdWx0O1xuXG5jb25zdCBBcHAgPSAoe25hbWUgPSAnU3RyYW5nZXInfSkgPT4ge1xuXHRjb25zdCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gPSBSZWFjdDtcblx0Y29uc3QgW2N1cnJlbnROYW1lLCBzZXRDdXJyZW50TmFtZV0gPSB1c2VTdGF0ZSgnc3RyYW5nZXInKTtcblx0Y29uc3QgW2lucHV0RmllbGRzLCBzZXRJbnB1dEZpZWxkc10gPSB1c2VTdGF0ZSh7XG5cdFx0J3N0cmFuZ2VyJzoge1xuXHRcdFx0aW5wdXREYXRhOiBbJyddLFxuXHRcdFx0YmFsYW5jZTogMCxcblx0XHRcdG93ZWRNb25leTogMCxcblx0XHRcdG93ZWRUbzogJycsXG5cdFx0XHRvd2VkRnJvbTogJycsXG5cdFx0fVxuXG5cdH0pO1xuXHRjb25zdCBbY3VycmVudElucHV0LCBzZXRDdXJyZW50SW5wdXRdID0gdXNlU3RhdGUoJycpO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cblx0XHRpZiAoa2V5LmxlZnRBcnJvdykge1xuXHRcdFx0Ly8gTGVmdCBhcnJvdyBrZXkgcHJlc3NlZFxuXHRcdH1cblxuXHRcdGlmKGtleS5yZXR1cm4pIHtcblx0XHRcdGNvbnNvbGUubG9nKFwicnR1cm4ga2V5IHdhcyBwcmVzc2VkXCIsIGN1cnJlbnRJbnB1dClcblx0XHRcdHVwZGF0ZURhdGFJblN0YXRlKGN1cnJlbnRJbnB1dClcblx0XHR9XG5cblx0fSk7XG5cblxuXHRjb25zdCAgdXBkYXRlRGF0YUluU3RhdGUgPSAoaW5wdXRTdHIpID0+IHtcblx0XHRjb25zb2xlLmxvZyhcImN1cnJlbnRJbnB1dCBjYWxsZWQgbGluZSAzMlwiLCBpbnB1dFN0cilcblx0XHRjb25zb2xlLmxvZyhcImN1cnJlbnRJbnB1dCBjYWxsZWQgbGluZSAzMyBpbnB1dFN0ci5pbmNsdWRlcygnbG9naW4nKVwiLCBpbnB1dFN0ci5pbmNsdWRlcygnbG9naW4nKSk7XG5cdFx0Y29uc29sZS5sb2coXCJjdXJyZW50SW5wdXQgY2FsbGVkIGxpbmUgMzQgaW5wdXRTdHIuaW5kZXhPZignbG9naW4nKSA+IC1cIiwgaW5wdXRTdHIuaW5kZXhPZignbG9naW4nKSAhPT0gLTEpO1xuXHRcdC8vIHN3aXRjaCAoaW5wdXRTdHIpIHtcblx0XHRcdGlmKGlucHV0U3RyLmluY2x1ZGVzKCdsb2dpbicpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gbG9naW5cIilcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmKGlucHV0U3RyLmluY2x1ZGVzKCdsb2dvdXQnKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGxvZ291dFwiKVxuXG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihpbnB1dFN0ci5pbmNsdWRlcygnZGVwb3NpdCcpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gZGVwb3NpdFwiKVxuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYoaW5wdXRTdHIuaW5jbHVkZXMoJ3RyYW5zZmVyJykpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiB0cmFuc2ZlclwiKVxuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblx0fVxuXHRjb25zdCBjdXJyZW50RGF0YSA9IGlucHV0RmllbGRzW2N1cnJlbnROYW1lXTtcblx0Y29uc29sZS5sb2coXCJjdXJyZW50RGF0YVwiLCBjdXJyZW50RGF0YSk7XG5cdHJldHVybiAoXG5cblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfT5cblx0XHRcdDxCb3ggYm9yZGVyU3R5bGU9XCJyb3VuZFwiIGJvcmRlckNvbG9yPVwiZ3JlZW5cIj5cblx0XHRcdFx0PFRleHQ+V2VsY29tZSA8L1RleHQ+XG5cdFx0XHQ8L0JveD5cblx0XHRcdHtjdXJyZW50RGF0YT8uaW5wdXREYXRhPy5tYXAoKGZpZWxkLCBpbmRleCk9PiB7XG5cdFx0XHRcdHJldHVybihcblx0XHRcdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfVxuXHRcdFx0XHRcdFx0IGtleT17aW5kZXh9PlxuXHRcdFx0XHRcdDxUZXh0SW5wdXRcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPXsnJ31cblx0XHRcdFx0XHRcdHZhbHVlPXtjdXJyZW50SW5wdXR9XG5cdFx0XHRcdFx0XHRvbkNoYW5nZT17c2V0Q3VycmVudElucHV0fVxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQ8TmV3bGluZSAvPlxuXHRcdFx0XHRcdFx0ey8qPFRleHQ+e2ZpZWxkLm91dHB1dFRleHR9PC9UZXh0PiovfVxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQpXG5cdFx0XHR9KX1cblxuXG5cdFx0PC9Cb3g+XG5cblx0KVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXSwibWFwcGluZ3MiOiJBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLElBQUk7RUFBRUMsR0FBRztFQUFFQyxRQUFRO0VBQUVDO0FBQVEsQ0FBQyxHQUFHSixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3ZELE1BQU1LLFNBQVMsR0FBR0wsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUNNLE9BQU87QUFFbkQsTUFBTUMsR0FBRyxHQUFHLENBQUM7RUFBQ0MsSUFBSSxHQUFHO0FBQVUsQ0FBQyxLQUFLO0VBQ3BDLE1BQU07SUFBQ0MsU0FBUztJQUFFQztFQUFRLENBQUMsR0FBR1gsS0FBSztFQUNuQyxNQUFNLENBQUNZLFdBQVcsRUFBRUMsY0FBYyxDQUFDLEdBQUdGLFFBQVEsQ0FBQyxVQUFVLENBQUM7RUFDMUQsTUFBTSxDQUFDRyxXQUFXLEVBQUVDLGNBQWMsQ0FBQyxHQUFHSixRQUFRLENBQUM7SUFDOUMsVUFBVSxFQUFFO01BQ1hLLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQztNQUNmQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxTQUFTLEVBQUUsQ0FBQztNQUNaQyxNQUFNLEVBQUUsRUFBRTtNQUNWQyxRQUFRLEVBQUU7SUFDWDtFQUVELENBQUMsQ0FBQztFQUNGLE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxlQUFlLENBQUMsR0FBR1gsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUVwRFAsUUFBUSxDQUFDLENBQUNtQixLQUFLLEVBQUVDLEdBQUcsS0FBSztJQUV4QixJQUFJQSxHQUFHLENBQUNDLFNBQVMsRUFBRTtNQUNsQjtJQUFBO0lBR0QsSUFBR0QsR0FBRyxDQUFDRSxNQUFNLEVBQUU7TUFDZEMsT0FBTyxDQUFDQyxHQUFHLENBQUMsdUJBQXVCLEVBQUVQLFlBQVksQ0FBQztNQUNsRFEsaUJBQWlCLENBQUNSLFlBQVksQ0FBQztJQUNoQztFQUVELENBQUMsQ0FBQztFQUdGLE1BQU9RLGlCQUFpQixHQUFJQyxRQUFRLElBQUs7SUFDeENILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDZCQUE2QixFQUFFRSxRQUFRLENBQUM7SUFDcERILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHdEQUF3RCxFQUFFRSxRQUFRLENBQUNDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqR0osT0FBTyxDQUFDQyxHQUFHLENBQUMsMkRBQTJELEVBQUVFLFFBQVEsQ0FBQ0UsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzFHO0lBQ0MsSUFBR0YsUUFBUSxDQUFDQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7TUFDOUJKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFVBQVUsQ0FBQztNQUN2QixPQUFPLENBQUM7SUFDVCxDQUFDLE1BQ0ksSUFBR0UsUUFBUSxDQUFDQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7TUFDcENKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFdBQVcsQ0FBQztNQUV4QixPQUFPLENBQUM7SUFDVCxDQUFDLE1BQ0ksSUFBR0UsUUFBUSxDQUFDQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7TUFDckNKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFlBQVksQ0FBQztNQUN6QixPQUFPLENBQUM7SUFDVCxDQUFDLE1BQ0ksSUFBR0UsUUFBUSxDQUFDQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7TUFDdENKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGFBQWEsQ0FBQztNQUMxQixPQUFPLENBQUM7SUFDVDtFQUNGLENBQUM7RUFDRCxNQUFNSyxXQUFXLEdBQUduQixXQUFXLENBQUNGLFdBQVcsQ0FBQztFQUM1Q2UsT0FBTyxDQUFDQyxHQUFHLENBQUMsYUFBYSxFQUFFSyxXQUFXLENBQUM7RUFDdkMsb0JBRUMsb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBRTtFQUFTLGdCQUM1QixvQkFBQyxHQUFHO0lBQUMsV0FBVyxFQUFDLE9BQU87SUFBQyxXQUFXLEVBQUM7RUFBTyxnQkFDM0Msb0JBQUMsSUFBSSxtQkFBZ0IsQ0FDaEIsRUFDTEEsV0FBVyxFQUFFakIsU0FBUyxFQUFFa0IsR0FBRyxDQUFDLENBQUNDLEtBQUssRUFBRUMsS0FBSyxLQUFJO0lBQzdDLG9CQUNDLG9CQUFDLEdBQUc7TUFBQyxhQUFhLEVBQUUsUUFBUztNQUMzQixHQUFHLEVBQUVBO0lBQU0sZ0JBQ2Isb0JBQUMsU0FBUztNQUNULFdBQVcsRUFBRSxFQUFHO01BQ2hCLEtBQUssRUFBRWYsWUFBYTtNQUNwQixRQUFRLEVBQUVDO0lBQWdCLEVBQ3pCLGVBQ0Qsb0JBQUMsT0FBTyxPQUFHLENBRU47RUFFUixDQUFDLENBQUMsQ0FHRztBQUdSLENBQUM7QUFFRGUsTUFBTSxDQUFDQyxPQUFPLEdBQUc5QixHQUFHIn0=