const React = require('react');
const {
  Text,
  Box,
  useInput
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [inputFields, setInputFields] = useState([{
    inputText: '',
    outputText: ''
  }]);
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    console.log("currentInput", currentInput, typeof currentInput);
    console.log("useInput handler called input", input);
    // console.log("useInput handler called key", key)

    if (key.leftArrow) {
      // Left arrow key pressed
    }
    setCurrentInput(currentInput + input);
    if (key.return) {
      console.log("rturn key was pressed");
    }
  });
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), inputFields.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: field.inputText ?? currentInput,
      onChange: input => {
        console.log('on change called line 44', input);
      }
    }), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiQXBwIiwibmFtZSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiaW5wdXRGaWVsZHMiLCJzZXRJbnB1dEZpZWxkcyIsImlucHV0VGV4dCIsIm91dHB1dFRleHQiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsImNvbnNvbGUiLCJsb2ciLCJsZWZ0QXJyb3ciLCJyZXR1cm4iLCJtYXAiLCJmaWVsZCIsImluZGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBUZXh0LCBCb3gsIHVzZUlucHV0IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cbmNvbnN0IEFwcCA9ICh7bmFtZSA9ICdTdHJhbmdlcid9KSA9PiB7XG5cdGNvbnN0IHt1c2VFZmZlY3QsIHVzZVN0YXRlfSA9IFJlYWN0O1xuXHRjb25zdCBbaW5wdXRGaWVsZHMsIHNldElucHV0RmllbGRzXSA9IHVzZVN0YXRlKFt7XG5cdFx0aW5wdXRUZXh0OiAnJyxcblx0XHRvdXRwdXRUZXh0OiAnJ1xuXHR9XSk7XG5cdGNvbnN0IFtjdXJyZW50SW5wdXQsIHNldEN1cnJlbnRJbnB1dF0gPSB1c2VTdGF0ZSgnJyk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRjb25zb2xlLmxvZyhcImN1cnJlbnRJbnB1dFwiLCBjdXJyZW50SW5wdXQsIHR5cGVvZiBjdXJyZW50SW5wdXQpO1xuXHRcdGNvbnNvbGUubG9nKFwidXNlSW5wdXQgaGFuZGxlciBjYWxsZWQgaW5wdXRcIiwgaW5wdXQpXG5cdFx0Ly8gY29uc29sZS5sb2coXCJ1c2VJbnB1dCBoYW5kbGVyIGNhbGxlZCBrZXlcIiwga2V5KVxuXG5cblx0XHRpZiAoa2V5LmxlZnRBcnJvdykge1xuXHRcdFx0Ly8gTGVmdCBhcnJvdyBrZXkgcHJlc3NlZFxuXHRcdH1cblx0XHRzZXRDdXJyZW50SW5wdXQoY3VycmVudElucHV0ICsgaW5wdXQpXG5cdFx0aWYoa2V5LnJldHVybikge1xuXHRcdFx0Y29uc29sZS5sb2coXCJydHVybiBrZXkgd2FzIHByZXNzZWRcIilcblx0XHR9XG5cblx0fSk7XG5cblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj17J2NvbHVtbid9PlxuXHRcdFx0PEJveCBib3JkZXJTdHlsZT1cInJvdW5kXCIgYm9yZGVyQ29sb3I9XCJncmVlblwiPlxuXHRcdFx0XHQ8VGV4dD5XZWxjb21lIDwvVGV4dD5cblx0XHRcdDwvQm94PlxuXHRcdFx0e2lucHV0RmllbGRzLm1hcCgoZmllbGQsIGluZGV4KT0+IHtcblx0XHRcdFx0cmV0dXJuKFxuXHRcdFx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj17J2NvbHVtbid9XG5cdFx0XHRcdFx0XHQga2V5PXtpbmRleH0+XG5cdFx0XHRcdFx0PFRleHRJbnB1dFxuXHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9eycnfVxuXHRcdFx0XHRcdFx0dmFsdWU9e2ZpZWxkLmlucHV0VGV4dCA/PyBjdXJyZW50SW5wdXR9XG5cdFx0XHRcdFx0XHRvbkNoYW5nZT17KGlucHV0KSA9PiB7XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdvbiBjaGFuZ2UgY2FsbGVkIGxpbmUgNDQnLCBpbnB1dClcblx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdDxUZXh0PntmaWVsZC5vdXRwdXRUZXh0fTwvVGV4dD5cblx0XHRcdFx0XHQ8L0JveD5cblx0XHRcdFx0KVxuXHRcdFx0fSl9XG5cblxuXHRcdDwvQm94PlxuXG5cdClcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxJQUFJO0VBQUVDLEdBQUc7RUFBRUM7QUFBUyxDQUFDLEdBQUdILE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDOUMsTUFBTUksU0FBUyxHQUFHSixPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ0ssT0FBTztBQUVuRCxNQUFNQyxHQUFHLEdBQUcsQ0FBQztFQUFDQyxJQUFJLEdBQUc7QUFBVSxDQUFDLEtBQUs7RUFDcEMsTUFBTTtJQUFDQyxTQUFTO0lBQUVDO0VBQVEsQ0FBQyxHQUFHVixLQUFLO0VBQ25DLE1BQU0sQ0FBQ1csV0FBVyxFQUFFQyxjQUFjLENBQUMsR0FBR0YsUUFBUSxDQUFDLENBQUM7SUFDL0NHLFNBQVMsRUFBRSxFQUFFO0lBQ2JDLFVBQVUsRUFBRTtFQUNiLENBQUMsQ0FBQyxDQUFDO0VBQ0gsTUFBTSxDQUFDQyxZQUFZLEVBQUVDLGVBQWUsQ0FBQyxHQUFHTixRQUFRLENBQUMsRUFBRSxDQUFDO0VBRXBETixRQUFRLENBQUMsQ0FBQ2EsS0FBSyxFQUFFQyxHQUFHLEtBQUs7SUFDeEJDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGNBQWMsRUFBRUwsWUFBWSxFQUFFLE9BQU9BLFlBQVksQ0FBQztJQUM5REksT0FBTyxDQUFDQyxHQUFHLENBQUMsK0JBQStCLEVBQUVILEtBQUssQ0FBQztJQUNuRDs7SUFHQSxJQUFJQyxHQUFHLENBQUNHLFNBQVMsRUFBRTtNQUNsQjtJQUFBO0lBRURMLGVBQWUsQ0FBQ0QsWUFBWSxHQUFHRSxLQUFLLENBQUM7SUFDckMsSUFBR0MsR0FBRyxDQUFDSSxNQUFNLEVBQUU7TUFDZEgsT0FBTyxDQUFDQyxHQUFHLENBQUMsdUJBQXVCLENBQUM7SUFDckM7RUFFRCxDQUFDLENBQUM7RUFHRixvQkFDQyxvQkFBQyxHQUFHO0lBQUMsYUFBYSxFQUFFO0VBQVMsZ0JBQzVCLG9CQUFDLEdBQUc7SUFBQyxXQUFXLEVBQUMsT0FBTztJQUFDLFdBQVcsRUFBQztFQUFPLGdCQUMzQyxvQkFBQyxJQUFJLG1CQUFnQixDQUNoQixFQUNMVCxXQUFXLENBQUNZLEdBQUcsQ0FBQyxDQUFDQyxLQUFLLEVBQUVDLEtBQUssS0FBSTtJQUNqQyxvQkFDQyxvQkFBQyxHQUFHO01BQUMsYUFBYSxFQUFFLFFBQVM7TUFDM0IsR0FBRyxFQUFFQTtJQUFNLGdCQUNiLG9CQUFDLFNBQVM7TUFDVCxXQUFXLEVBQUUsRUFBRztNQUNoQixLQUFLLEVBQUVELEtBQUssQ0FBQ1gsU0FBUyxJQUFJRSxZQUFhO01BQ3ZDLFFBQVEsRUFBR0UsS0FBSyxJQUFLO1FBQ3BCRSxPQUFPLENBQUNDLEdBQUcsQ0FBQywwQkFBMEIsRUFBRUgsS0FBSyxDQUFDO01BQy9DO0lBQUUsRUFDRCxlQUNELG9CQUFDLElBQUksUUFBRU8sS0FBSyxDQUFDVixVQUFVLENBQVEsQ0FDMUI7RUFFUixDQUFDLENBQUMsQ0FHRztBQUdSLENBQUM7QUFFRFksTUFBTSxDQUFDQyxPQUFPLEdBQUdwQixHQUFHIn0=