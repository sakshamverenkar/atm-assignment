const React = require('react');
const {
  Text,
  Box,
  useInput
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [inputFields, setInputFields] = useState([{
    inputText: '',
    outputText: ''
  }]);
  const [currentInput, setCurrentInput] = useState({});
  useInput((input, key) => {
    console.log("useInput handler called input", input);
    console.log("useInput handler called key", input);
    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed");
    }
  });
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), inputFields.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column'
    }, /*#__PURE__*/React.createElement(TextInput, {
      key: index,
      placeholder: '',
      value: field.inputText ?? currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiQXBwIiwibmFtZSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiaW5wdXRGaWVsZHMiLCJzZXRJbnB1dEZpZWxkcyIsImlucHV0VGV4dCIsIm91dHB1dFRleHQiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsImNvbnNvbGUiLCJsb2ciLCJsZWZ0QXJyb3ciLCJyZXR1cm4iLCJtYXAiLCJmaWVsZCIsImluZGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBUZXh0LCBCb3gsIHVzZUlucHV0IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cbmNvbnN0IEFwcCA9ICh7bmFtZSA9ICdTdHJhbmdlcid9KSA9PiB7XG5cdGNvbnN0IHt1c2VFZmZlY3QsIHVzZVN0YXRlfSA9IFJlYWN0O1xuXHRjb25zdCBbaW5wdXRGaWVsZHMsIHNldElucHV0RmllbGRzXSA9IHVzZVN0YXRlKFt7XG5cdFx0aW5wdXRUZXh0OiAnJyxcblx0XHRvdXRwdXRUZXh0OiAnJ1xuXHR9XSk7XG5cdGNvbnN0IFtjdXJyZW50SW5wdXQsIHNldEN1cnJlbnRJbnB1dF0gPSB1c2VTdGF0ZSh7fSk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRjb25zb2xlLmxvZyhcInVzZUlucHV0IGhhbmRsZXIgY2FsbGVkIGlucHV0XCIsIGlucHV0KVxuXHRcdGNvbnNvbGUubG9nKFwidXNlSW5wdXQgaGFuZGxlciBjYWxsZWQga2V5XCIsIGlucHV0KVxuXG5cdFx0aWYgKGtleS5sZWZ0QXJyb3cpIHtcblx0XHRcdC8vIExlZnQgYXJyb3cga2V5IHByZXNzZWRcblx0XHR9XG5cdFx0aWYoa2V5LnJldHVybikge1xuXHRcdFx0Y29uc29sZS5sb2coXCJydHVybiBrZXkgd2FzIHByZXNzZWRcIilcblx0XHR9XG5cdH0pO1xuXG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfT5cblx0XHRcdDxCb3ggYm9yZGVyU3R5bGU9XCJyb3VuZFwiIGJvcmRlckNvbG9yPVwiZ3JlZW5cIj5cblx0XHRcdFx0PFRleHQ+V2VsY29tZSA8L1RleHQ+XG5cdFx0XHQ8L0JveD5cblx0XHRcdHtpbnB1dEZpZWxkcy5tYXAoKGZpZWxkLCBpbmRleCk9PiB7XG5cdFx0XHRcdHJldHVybihcblx0XHRcdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfT5cblx0XHRcdFx0XHQ8VGV4dElucHV0XG5cdFx0XHRcdFx0XHRrZXk9e2luZGV4fVxuXHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9eycnfVxuXHRcdFx0XHRcdFx0dmFsdWU9e2ZpZWxkLmlucHV0VGV4dCA/PyBjdXJyZW50SW5wdXR9XG5cdFx0XHRcdFx0XHRvbkNoYW5nZT17c2V0Q3VycmVudElucHV0fVxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQ8VGV4dD57ZmllbGQub3V0cHV0VGV4dH08L1RleHQ+XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdClcblx0XHRcdH0pfVxuXG5cblx0XHQ8L0JveD5cblxuXHQpXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsSUFBSTtFQUFFQyxHQUFHO0VBQUVDO0FBQVMsQ0FBQyxHQUFHSCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQzlDLE1BQU1JLFNBQVMsR0FBR0osT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUNLLE9BQU87QUFFbkQsTUFBTUMsR0FBRyxHQUFHLENBQUM7RUFBQ0MsSUFBSSxHQUFHO0FBQVUsQ0FBQyxLQUFLO0VBQ3BDLE1BQU07SUFBQ0MsU0FBUztJQUFFQztFQUFRLENBQUMsR0FBR1YsS0FBSztFQUNuQyxNQUFNLENBQUNXLFdBQVcsRUFBRUMsY0FBYyxDQUFDLEdBQUdGLFFBQVEsQ0FBQyxDQUFDO0lBQy9DRyxTQUFTLEVBQUUsRUFBRTtJQUNiQyxVQUFVLEVBQUU7RUFDYixDQUFDLENBQUMsQ0FBQztFQUNILE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxlQUFlLENBQUMsR0FBR04sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBRXBETixRQUFRLENBQUMsQ0FBQ2EsS0FBSyxFQUFFQyxHQUFHLEtBQUs7SUFDeEJDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLCtCQUErQixFQUFFSCxLQUFLLENBQUM7SUFDbkRFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDZCQUE2QixFQUFFSCxLQUFLLENBQUM7SUFFakQsSUFBSUMsR0FBRyxDQUFDRyxTQUFTLEVBQUU7TUFDbEI7SUFBQTtJQUVELElBQUdILEdBQUcsQ0FBQ0ksTUFBTSxFQUFFO01BQ2RILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHVCQUF1QixDQUFDO0lBQ3JDO0VBQ0QsQ0FBQyxDQUFDO0VBR0Ysb0JBQ0Msb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBRTtFQUFTLGdCQUM1QixvQkFBQyxHQUFHO0lBQUMsV0FBVyxFQUFDLE9BQU87SUFBQyxXQUFXLEVBQUM7RUFBTyxnQkFDM0Msb0JBQUMsSUFBSSxtQkFBZ0IsQ0FDaEIsRUFDTFQsV0FBVyxDQUFDWSxHQUFHLENBQUMsQ0FBQ0MsS0FBSyxFQUFFQyxLQUFLLEtBQUk7SUFDakMsb0JBQ0Msb0JBQUMsR0FBRztNQUFDLGFBQWEsRUFBRTtJQUFTLGdCQUM3QixvQkFBQyxTQUFTO01BQ1QsR0FBRyxFQUFFQSxLQUFNO01BQ1gsV0FBVyxFQUFFLEVBQUc7TUFDaEIsS0FBSyxFQUFFRCxLQUFLLENBQUNYLFNBQVMsSUFBSUUsWUFBYTtNQUN2QyxRQUFRLEVBQUVDO0lBQWdCLEVBQ3pCLGVBQ0Qsb0JBQUMsSUFBSSxRQUFFUSxLQUFLLENBQUNWLFVBQVUsQ0FBUSxDQUMxQjtFQUVSLENBQUMsQ0FBQyxDQUdHO0FBR1IsQ0FBQztBQUVEWSxNQUFNLENBQUNDLE9BQU8sR0FBR3BCLEdBQUcifQ==