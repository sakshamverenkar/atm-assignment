const React = require('react');
const {
  Text,
  Box,
  useInput,
  Newline
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const dummyInputData = [];
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState({});
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const getData = name => {
    name = name || currentName;
    console.log("inputFields line 30 called", inputFields);
    return inputFields[name];
  };
  const createNewNameData = obj => {
    const {
      name,
      balance = 0,
      owedMoney = 0
    } = obj;
    return {
      [name]: {
        inputData: [{
          inputType: 'login',
          inputText: `login ${name}`,
          outputText: `Hello, ${name}! \n Your balance is ${balance}`
        }],
        balance: 0,
        owedMoney: 0,
        owedTo: '',
        owedFrom: ''
      }
    };
  };
  const updateDataInState = inputStr => {
    console.log("currentInput called line 32", inputStr);
    console.log("currentInput called line 33 inputStr.includes('login')", inputStr.includes('login'));
    console.log("currentInput called line 34 inputStr.indexOf('login') > -", inputStr.indexOf('login') !== -1);
    if (inputStr.includes('login')) {
      console.log("in login");
      const name = inputStr.split(' ')[1];
      console.log("name", name);
      const getDataFromState = getData(name);
      console.log("getDataFromState called line 62", getDataFromState);
      if (!getDataFromState) {
        const createdData = createNewNameData({
          name
        });
        console.log("createdData", createdData);
        setInputFields({
          ...inputFields
        });
      }
      return 1;
    } else if (inputStr.includes('logout')) {
      console.log("in logout");
      return 1;
    } else if (inputStr.includes('deposit')) {
      console.log("in deposit");
      return 1;
    } else if (inputStr.includes('transfer')) {
      console.log("in transfer");
      return 1;
    }
  };
  const currentData = getData();
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, currentData?.inputData?.map((field, index) => {
    console.log("field", field);
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(Text, null, "11112"), /*#__PURE__*/React.createElement(Newline, null));
  })), /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(TextInput, {
    placeholder: '',
    value: currentInput,
    onChange: setCurrentInput
  }), /*#__PURE__*/React.createElement(Newline, null)));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJOZXdsaW5lIiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIkFwcCIsIm5hbWUiLCJkdW1teUlucHV0RGF0YSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiY3VycmVudE5hbWUiLCJzZXRDdXJyZW50TmFtZSIsImlucHV0RmllbGRzIiwic2V0SW5wdXRGaWVsZHMiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsInJldHVybiIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGVEYXRhSW5TdGF0ZSIsImdldERhdGEiLCJjcmVhdGVOZXdOYW1lRGF0YSIsIm9iaiIsImJhbGFuY2UiLCJvd2VkTW9uZXkiLCJpbnB1dERhdGEiLCJpbnB1dFR5cGUiLCJpbnB1dFRleHQiLCJvdXRwdXRUZXh0Iiwib3dlZFRvIiwib3dlZEZyb20iLCJpbnB1dFN0ciIsImluY2x1ZGVzIiwiaW5kZXhPZiIsInNwbGl0IiwiZ2V0RGF0YUZyb21TdGF0ZSIsImNyZWF0ZWREYXRhIiwiY3VycmVudERhdGEiLCJtYXAiLCJmaWVsZCIsImluZGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBUZXh0LCBCb3gsIHVzZUlucHV0LCBOZXdsaW5lIH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cbmNvbnN0IEFwcCA9ICh7bmFtZSA9ICdTdHJhbmdlcid9KSA9PiB7XG5cdGNvbnN0IGR1bW15SW5wdXREYXRhID0gW11cblx0Y29uc3Qge3VzZUVmZmVjdCwgdXNlU3RhdGV9ID0gUmVhY3Q7XG5cdGNvbnN0IFtjdXJyZW50TmFtZSwgc2V0Q3VycmVudE5hbWVdID0gdXNlU3RhdGUoJ3N0cmFuZ2VyJyk7XG5cdGNvbnN0IFtpbnB1dEZpZWxkcywgc2V0SW5wdXRGaWVsZHNdID0gdXNlU3RhdGUoe1xuXHR9KTtcblx0Y29uc3QgW2N1cnJlbnRJbnB1dCwgc2V0Q3VycmVudElucHV0XSA9IHVzZVN0YXRlKCcnKTtcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXHRcdGlmKGtleS5yZXR1cm4pIHtcblx0XHRcdGNvbnNvbGUubG9nKFwicnR1cm4ga2V5IHdhcyBwcmVzc2VkXCIsIGN1cnJlbnRJbnB1dClcblx0XHRcdHVwZGF0ZURhdGFJblN0YXRlKGN1cnJlbnRJbnB1dClcblx0XHR9XG5cblx0fSk7XG5cblxuXHRjb25zdCBnZXREYXRhID0gKG5hbWUpID0+IHtcblx0XHRuYW1lID0gbmFtZSB8fCBjdXJyZW50TmFtZTtcblx0XHRjb25zb2xlLmxvZyhcImlucHV0RmllbGRzIGxpbmUgMzAgY2FsbGVkXCIsaW5wdXRGaWVsZHMpXG5cdFx0cmV0dXJuIGlucHV0RmllbGRzW25hbWVdXG5cdH1cblx0Y29uc3QgY3JlYXRlTmV3TmFtZURhdGEgPSAob2JqKSA9PiB7XG5cdFx0Y29uc3R7IG5hbWUsIGJhbGFuY2UgPSAwLCBvd2VkTW9uZXk9MH0gPSBvYmo7XG5cdFx0IHJldHVybiB7XG5cdFx0XHRbbmFtZV0gOiB7XG5cdFx0XHRcdGlucHV0RGF0YTogW3tcblx0XHRcdFx0XHRpbnB1dFR5cGU6ICdsb2dpbicsXG5cdFx0XHRcdFx0aW5wdXRUZXh0OiBgbG9naW4gJHtuYW1lfWAsXG5cdFx0XHRcdFx0b3V0cHV0VGV4dDogYEhlbGxvLCAke25hbWV9ISBcXG4gWW91ciBiYWxhbmNlIGlzICR7YmFsYW5jZX1gXG5cdFx0XHRcdH1dLFxuXHRcdFx0XHRiYWxhbmNlOjAsXG5cdFx0XHRcdG93ZWRNb25leTogMCxcblx0XHRcdFx0b3dlZFRvOiAnJyxcblx0XHRcdFx0b3dlZEZyb206ICcnLFxuXHRcdFx0fVxuXHRcdH1cblx0XHR9XG5cblxuXHRjb25zdCAgdXBkYXRlRGF0YUluU3RhdGUgPSAoaW5wdXRTdHIpID0+IHtcblx0XHRjb25zb2xlLmxvZyhcImN1cnJlbnRJbnB1dCBjYWxsZWQgbGluZSAzMlwiLCBpbnB1dFN0cilcblx0XHRjb25zb2xlLmxvZyhcImN1cnJlbnRJbnB1dCBjYWxsZWQgbGluZSAzMyBpbnB1dFN0ci5pbmNsdWRlcygnbG9naW4nKVwiLCBpbnB1dFN0ci5pbmNsdWRlcygnbG9naW4nKSk7XG5cdFx0Y29uc29sZS5sb2coXCJjdXJyZW50SW5wdXQgY2FsbGVkIGxpbmUgMzQgaW5wdXRTdHIuaW5kZXhPZignbG9naW4nKSA+IC1cIiwgaW5wdXRTdHIuaW5kZXhPZignbG9naW4nKSAhPT0gLTEpO1xuXHRcdFx0aWYoaW5wdXRTdHIuaW5jbHVkZXMoJ2xvZ2luJykpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBsb2dpblwiKVxuXHRcdFx0XHRjb25zdCBuYW1lID0gaW5wdXRTdHIuc3BsaXQoJyAnKVsxXVxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIm5hbWVcIiwgbmFtZSk7XG5cdFx0XHRcdGNvbnN0IGdldERhdGFGcm9tU3RhdGUgPSBnZXREYXRhKG5hbWUpXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiZ2V0RGF0YUZyb21TdGF0ZSBjYWxsZWQgbGluZSA2MlwiLCBnZXREYXRhRnJvbVN0YXRlKTtcblx0XHRcdFx0aWYoIWdldERhdGFGcm9tU3RhdGUpIHtcblx0XHRcdFx0XHRjb25zdCBjcmVhdGVkRGF0YSA9IGNyZWF0ZU5ld05hbWVEYXRhKHtuYW1lfSkgO1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiY3JlYXRlZERhdGFcIiwgY3JlYXRlZERhdGEpXG5cdFx0XHRcdFx0c2V0SW5wdXRGaWVsZHMoey4uLmlucHV0RmllbGRzfSlcblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmKGlucHV0U3RyLmluY2x1ZGVzKCdsb2dvdXQnKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGxvZ291dFwiKVxuXG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihpbnB1dFN0ci5pbmNsdWRlcygnZGVwb3NpdCcpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gZGVwb3NpdFwiKVxuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYoaW5wdXRTdHIuaW5jbHVkZXMoJ3RyYW5zZmVyJykpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiB0cmFuc2ZlclwiKVxuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblx0fVxuXG5cdGNvbnN0IGN1cnJlbnREYXRhID0gZ2V0RGF0YSgpO1xuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj17J2NvbHVtbid9PlxuXHRcdFx0PEJveCBib3JkZXJTdHlsZT1cInJvdW5kXCIgYm9yZGVyQ29sb3I9XCJncmVlblwiPlxuXHRcdFx0XHQ8VGV4dD5XZWxjb21lIDwvVGV4dD5cblx0XHRcdDwvQm94PlxuXHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ30+XG5cdFx0XHR7Y3VycmVudERhdGE/LmlucHV0RGF0YT8ubWFwKChmaWVsZCwgaW5kZXgpPT4ge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImZpZWxkXCIsIGZpZWxkKTtcblx0XHRcdFx0cmV0dXJuKFxuXHRcdFx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj17J2NvbHVtbid9XG5cdFx0XHRcdFx0XHQga2V5PXtpbmRleH0+XG5cdFx0XHRcdFx0XHQ8VGV4dD5cblx0XHRcdFx0XHRcdFx0MTExMTJcblx0XHRcdFx0XHRcdDwvVGV4dD5cblx0XHRcdFx0XHRcdDxOZXdsaW5lIC8+XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdClcblx0XHRcdH0pfVxuXHRcdFx0PC9Cb3g+XG5cdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfT5cblx0XHRcdFx0PFRleHRJbnB1dFxuXHRcdFx0XHRcdHBsYWNlaG9sZGVyPXsnJ31cblx0XHRcdFx0XHR2YWx1ZT17Y3VycmVudElucHV0fVxuXHRcdFx0XHRcdG9uQ2hhbmdlPXtzZXRDdXJyZW50SW5wdXR9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxOZXdsaW5lIC8+XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXSwibWFwcGluZ3MiOiJBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLElBQUk7RUFBRUMsR0FBRztFQUFFQyxRQUFRO0VBQUVDO0FBQVEsQ0FBQyxHQUFHSixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3ZELE1BQU1LLFNBQVMsR0FBR0wsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUNNLE9BQU87QUFFbkQsTUFBTUMsR0FBRyxHQUFHLENBQUM7RUFBQ0MsSUFBSSxHQUFHO0FBQVUsQ0FBQyxLQUFLO0VBQ3BDLE1BQU1DLGNBQWMsR0FBRyxFQUFFO0VBQ3pCLE1BQU07SUFBQ0MsU0FBUztJQUFFQztFQUFRLENBQUMsR0FBR1osS0FBSztFQUNuQyxNQUFNLENBQUNhLFdBQVcsRUFBRUMsY0FBYyxDQUFDLEdBQUdGLFFBQVEsQ0FBQyxVQUFVLENBQUM7RUFDMUQsTUFBTSxDQUFDRyxXQUFXLEVBQUVDLGNBQWMsQ0FBQyxHQUFHSixRQUFRLENBQUMsQ0FDL0MsQ0FBQyxDQUFDO0VBQ0YsTUFBTSxDQUFDSyxZQUFZLEVBQUVDLGVBQWUsQ0FBQyxHQUFHTixRQUFRLENBQUMsRUFBRSxDQUFDO0VBRXBEUixRQUFRLENBQUMsQ0FBQ2UsS0FBSyxFQUFFQyxHQUFHLEtBQUs7SUFDeEIsSUFBR0EsR0FBRyxDQUFDQyxNQUFNLEVBQUU7TUFDZEMsT0FBTyxDQUFDQyxHQUFHLENBQUMsdUJBQXVCLEVBQUVOLFlBQVksQ0FBQztNQUNsRE8saUJBQWlCLENBQUNQLFlBQVksQ0FBQztJQUNoQztFQUVELENBQUMsQ0FBQztFQUdGLE1BQU1RLE9BQU8sR0FBSWhCLElB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