const React = require('react');
const {
  Text,
  Box,
  useInput,
  Newline
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const dummyInputData = [];
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState({});
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const getData = name => {
    name = name || currentName;
    console.log("inputFields line 30 called", inputFields);
    return inputFields[name];
  };
  const createNewNameData = obj => {
    const {
      name,
      balance = 0,
      owedMoney = 0
    } = obj;
    return {
      [name]: {
        inputData: [{
          inputType: 'login',
          inputText: `login ${name}`,
          outputText: `Hello, ${name}! \n Your balance is ${balance}`
        }],
        balance: 0,
        owedMoney: 0,
        owedTo: '',
        owedFrom: ''
      }
    };
  };
  const updateDataInState = inputStr => {
    if (inputStr.includes('login')) {
      console.log("in login");
      const name = inputStr.split(' ')[1];
      const getDataFromState = getData(name);
      if (!getDataFromState) {
        const createdData = createNewNameData({
          name
        });
        setInputFields({
          ...inputFields,
          ...createdData
        });
        setCurrentName(name);
        setCurrentInput('');
      }
      return 1;
    } else if (inputStr.includes('logout')) {
      console.log("in logout");
      return 1;
    } else if (inputStr.includes('deposit')) {
      console.log("in deposit");
      return 1;
    } else if (inputStr.includes('transfer')) {
      console.log("in transfer");
      return 1;
    }
  };
  const currentData = getData();
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, currentData?.inputData?.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(Text, null, field.inputText), /*#__PURE__*/React.createElement(Newline, null), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  })), /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(TextInput, {
    placeholder: '',
    value: currentInput,
    onChange: setCurrentInput
  }), /*#__PURE__*/React.createElement(Newline, null)));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJOZXdsaW5lIiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIkFwcCIsIm5hbWUiLCJkdW1teUlucHV0RGF0YSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiY3VycmVudE5hbWUiLCJzZXRDdXJyZW50TmFtZSIsImlucHV0RmllbGRzIiwic2V0SW5wdXRGaWVsZHMiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsInJldHVybiIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGVEYXRhSW5TdGF0ZSIsImdldERhdGEiLCJjcmVhdGVOZXdOYW1lRGF0YSIsIm9iaiIsImJhbGFuY2UiLCJvd2VkTW9uZXkiLCJpbnB1dERhdGEiLCJpbnB1dFR5cGUiLCJpbnB1dFRleHQiLCJvdXRwdXRUZXh0Iiwib3dlZFRvIiwib3dlZEZyb20iLCJpbnB1dFN0ciIsImluY2x1ZGVzIiwic3BsaXQiLCJnZXREYXRhRnJvbVN0YXRlIiwiY3JlYXRlZERhdGEiLCJjdXJyZW50RGF0YSIsIm1hcCIsImZpZWxkIiwiaW5kZXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidWkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IFRleHQsIEJveCwgdXNlSW5wdXQsIE5ld2xpbmUgfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKFwiaW5rLXRleHQtaW5wdXRcIikuZGVmYXVsdDtcblxuY29uc3QgQXBwID0gKHtuYW1lID0gJ1N0cmFuZ2VyJ30pID0+IHtcblx0Y29uc3QgZHVtbXlJbnB1dERhdGEgPSBbXVxuXHRjb25zdCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gPSBSZWFjdDtcblx0Y29uc3QgW2N1cnJlbnROYW1lLCBzZXRDdXJyZW50TmFtZV0gPSB1c2VTdGF0ZSgnc3RyYW5nZXInKTtcblx0Y29uc3QgW2lucHV0RmllbGRzLCBzZXRJbnB1dEZpZWxkc10gPSB1c2VTdGF0ZSh7fSk7XG5cdGNvbnN0IFtjdXJyZW50SW5wdXQsIHNldEN1cnJlbnRJbnB1dF0gPSB1c2VTdGF0ZSgnJyk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRpZihrZXkucmV0dXJuKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcInJ0dXJuIGtleSB3YXMgcHJlc3NlZFwiLCBjdXJyZW50SW5wdXQpXG5cdFx0XHR1cGRhdGVEYXRhSW5TdGF0ZShjdXJyZW50SW5wdXQpXG5cdFx0fVxuXG5cdH0pO1xuXG5cblx0Y29uc3QgZ2V0RGF0YSA9IChuYW1lKSA9PiB7XG5cdFx0bmFtZSA9IG5hbWUgfHwgY3VycmVudE5hbWU7XG5cdFx0Y29uc29sZS5sb2coXCJpbnB1dEZpZWxkcyBsaW5lIDMwIGNhbGxlZFwiLGlucHV0RmllbGRzKVxuXHRcdHJldHVybiBpbnB1dEZpZWxkc1tuYW1lXVxuXHR9XG5cdGNvbnN0IGNyZWF0ZU5ld05hbWVEYXRhID0gKG9iaikgPT4ge1xuXHRcdGNvbnN0eyBuYW1lLCBiYWxhbmNlID0gMCwgb3dlZE1vbmV5PTB9ID0gb2JqO1xuXHRcdCByZXR1cm4ge1xuXHRcdFx0W25hbWVdIDoge1xuXHRcdFx0XHRpbnB1dERhdGE6IFt7XG5cdFx0XHRcdFx0aW5wdXRUeXBlOiAnbG9naW4nLFxuXHRcdFx0XHRcdGlucHV0VGV4dDogYGxvZ2luICR7bmFtZX1gLFxuXHRcdFx0XHRcdG91dHB1dFRleHQ6IGBIZWxsbywgJHtuYW1lfSEgXFxuIFlvdXIgYmFsYW5jZSBpcyAke2JhbGFuY2V9YFxuXHRcdFx0XHR9XSxcblx0XHRcdFx0YmFsYW5jZTowLFxuXHRcdFx0XHRvd2VkTW9uZXk6IDAsXG5cdFx0XHRcdG93ZWRUbzogJycsXG5cdFx0XHRcdG93ZWRGcm9tOiAnJyxcblx0XHRcdH1cblx0XHR9XG5cdFx0fVxuXG5cblx0Y29uc3QgIHVwZGF0ZURhdGFJblN0YXRlID0gKGlucHV0U3RyKSA9PiB7XG5cdFx0XHRpZihpbnB1dFN0ci5pbmNsdWRlcygnbG9naW4nKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGxvZ2luXCIpXG5cdFx0XHRcdGNvbnN0IG5hbWUgPSBpbnB1dFN0ci5zcGxpdCgnICcpWzFdXG5cdFx0XHRcdGNvbnN0IGdldERhdGFGcm9tU3RhdGUgPSBnZXREYXRhKG5hbWUpXG5cblx0XHRcdFx0aWYoIWdldERhdGFGcm9tU3RhdGUpIHtcblx0XHRcdFx0XHRjb25zdCBjcmVhdGVkRGF0YSA9IGNyZWF0ZU5ld05hbWVEYXRhKHtuYW1lfSkgO1xuXHRcdFx0XHRcdHNldElucHV0RmllbGRzKHsuLi5pbnB1dEZpZWxkcywgLi4uY3JlYXRlZERhdGF9KVxuXHRcdFx0XHRcdHNldEN1cnJlbnROYW1lKG5hbWUpXG5cdFx0XHRcdFx0c2V0Q3VycmVudElucHV0KCcnKVxuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYoaW5wdXRTdHIuaW5jbHVkZXMoJ2xvZ291dCcpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gbG9nb3V0XCIpXG5cblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmKGlucHV0U3RyLmluY2x1ZGVzKCdkZXBvc2l0JykpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBkZXBvc2l0XCIpXG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihpbnB1dFN0ci5pbmNsdWRlcygndHJhbnNmZXInKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIHRyYW5zZmVyXCIpXG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHR9XG5cblx0Y29uc3QgY3VycmVudERhdGEgPSBnZXREYXRhKCk7XG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ30+XG5cdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfT5cblx0XHRcdHtjdXJyZW50RGF0YT8uaW5wdXREYXRhPy5tYXAoKGZpZWxkLCBpbmRleCk9PiB7XG5cdFx0XHRcdHJldHVybihcblx0XHRcdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfVxuXHRcdFx0XHRcdFx0IGtleT17aW5kZXh9PlxuXHRcdFx0XHRcdFx0PFRleHQ+XG5cdFx0XHRcdFx0XHRcdHtmaWVsZC5pbnB1dFRleHR9XG5cdFx0XHRcdFx0XHQ8L1RleHQ+XG5cdFx0XHRcdFx0XHQ8TmV3bGluZSAvPlxuXHRcdFx0XHRcdFx0PFRleHQ+XG5cdFx0XHRcdFx0XHRcdHtmaWVsZC5vdXRwdXRUZXh0fVxuXHRcdFx0XHRcdFx0PC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQpXG5cdFx0XHR9KX1cblx0XHRcdDwvQm94PlxuXHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ30+XG5cdFx0XHRcdDxUZXh0SW5wdXRcblx0XHRcdFx0XHRwbGFjZWhvbGRlcj17Jyd9XG5cdFx0XHRcdFx0dmFsdWU9e2N1cnJlbnRJbnB1dH1cblx0XHRcdFx0XHRvbkNoYW5nZT17c2V0Q3VycmVudElucHV0fVxuXHRcdFx0XHQvPlxuXHRcdFx0XHQ8TmV3bGluZSAvPlxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdClcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxJQUFJO0VBQUVDLEdBQUc7RUFBRUMsUUFBUTtFQUFFQztBQUFRLENBQUMsR0FBR0osT0FBTyxDQUFDLEtBQUssQ0FBQztBQUN2RCxNQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDTSxPQUFPO0FBRW5ELE1BQU1DLEdBQUcsR0FBRyxDQUFDO0VBQUNDLElBQUksR0FBRztBQUFVLENBQUMsS0FBSztFQUNwQyxNQUFNQyxj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