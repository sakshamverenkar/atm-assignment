const React = require('react');
const {
  Text,
  Box,
  useInput
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState([{
    'stranger': {
      inputData: [{
        inputText: '',
        outputText: '',
        statementType: ''
      }],
      balance: 0,
      owedMoney: 0,
      owedTo: '',
      owedFrom: ''
    }
  }]);
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const updateDataInState = inputStr => {
    console.log("currentInput called line 32", inputStr);
    console.log("currentInput called line 33 inputStr.includes('login')", inputStr.includes('login'));
    console.log("currentInput called line 34 inputStr.indexOf('login') > -", inputStr.indexOf('login') !== -1);
    // switch (inputStr) {
    if (inputStr.includes('login')) {
      console.log("in login");
      return 1;
    } else if (inputStr.includes('logout')) {
      console.log("in logout");
      return 1;
    } else if (inputStr.includes('deposit')) {
      console.log("in deposit");
      return 1;
    } else if (inputStr.includes('transfer')) {
      console.log("in transfer");
      return 1;
    }
  };
  const currentData = inputFields[currentName];
  console.log("currentData", currentData);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), inputFields.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiQXBwIiwibmFtZSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiY3VycmVudE5hbWUiLCJzZXRDdXJyZW50TmFtZSIsImlucHV0RmllbGRzIiwic2V0SW5wdXRGaWVsZHMiLCJpbnB1dERhdGEiLCJpbnB1dFRleHQiLCJvdXRwdXRUZXh0Iiwic3RhdGVtZW50VHlwZSIsImJhbGFuY2UiLCJvd2VkTW9uZXkiLCJvd2VkVG8iLCJvd2VkRnJvbSIsImN1cnJlbnRJbnB1dCIsInNldEN1cnJlbnRJbnB1dCIsImlucHV0Iiwia2V5IiwibGVmdEFycm93IiwicmV0dXJuIiwiY29uc29sZSIsImxvZyIsInVwZGF0ZURhdGFJblN0YXRlIiwiaW5wdXRTdHIiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJjdXJyZW50RGF0YSIsIm1hcCIsImZpZWxkIiwiaW5kZXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidWkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IFRleHQsIEJveCwgdXNlSW5wdXQgfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKFwiaW5rLXRleHQtaW5wdXRcIikuZGVmYXVsdDtcblxuY29uc3QgQXBwID0gKHtuYW1lID0gJ1N0cmFuZ2VyJ30pID0+IHtcblx0Y29uc3Qge3VzZUVmZmVjdCwgdXNlU3RhdGV9ID0gUmVhY3Q7XG5cdGNvbnN0IFtjdXJyZW50TmFtZSwgc2V0Q3VycmVudE5hbWVdID0gdXNlU3RhdGUoJ3N0cmFuZ2VyJyk7XG5cdGNvbnN0IFtpbnB1dEZpZWxkcywgc2V0SW5wdXRGaWVsZHNdID0gdXNlU3RhdGUoW3tcblx0XHQnc3RyYW5nZXInOiB7XG5cdFx0XHRpbnB1dERhdGE6IFt7XG5cdFx0XHRcdGlucHV0VGV4dDogJycsXG5cdFx0XHRcdG91dHB1dFRleHQ6ICcnLFxuXHRcdFx0XHRzdGF0ZW1lbnRUeXBlOiAnJyxcblx0XHRcdH1dLFxuXHRcdFx0YmFsYW5jZTogMCxcblx0XHRcdG93ZWRNb25leTogMCxcblx0XHRcdG93ZWRUbzogJycsXG5cdFx0XHRvd2VkRnJvbTogJycsXG5cdFx0fVxuXG5cdH1dKTtcblx0Y29uc3QgW2N1cnJlbnRJbnB1dCwgc2V0Q3VycmVudElucHV0XSA9IHVzZVN0YXRlKCcnKTtcblxuXHR1c2VJbnB1dCgoaW5wdXQsIGtleSkgPT4ge1xuXG5cblx0XHRpZiAoa2V5LmxlZnRBcnJvdykge1xuXHRcdFx0Ly8gTGVmdCBhcnJvdyBrZXkgcHJlc3NlZFxuXHRcdH1cblxuXHRcdGlmKGtleS5yZXR1cm4pIHtcblx0XHRcdGNvbnNvbGUubG9nKFwicnR1cm4ga2V5IHdhcyBwcmVzc2VkXCIsIGN1cnJlbnRJbnB1dClcblx0XHRcdHVwZGF0ZURhdGFJblN0YXRlKGN1cnJlbnRJbnB1dClcblx0XHR9XG5cblx0fSk7XG5cblx0Y29uc3QgIHVwZGF0ZURhdGFJblN0YXRlID0gKGlucHV0U3RyKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coXCJjdXJyZW50SW5wdXQgY2FsbGVkIGxpbmUgMzJcIiwgaW5wdXRTdHIpXG5cdFx0Y29uc29sZS5sb2coXCJjdXJyZW50SW5wdXQgY2FsbGVkIGxpbmUgMzMgaW5wdXRTdHIuaW5jbHVkZXMoJ2xvZ2luJylcIiwgaW5wdXRTdHIuaW5jbHVkZXMoJ2xvZ2luJykpO1xuXHRcdGNvbnNvbGUubG9nKFwiY3VycmVudElucHV0IGNhbGxlZCBsaW5lIDM0IGlucHV0U3RyLmluZGV4T2YoJ2xvZ2luJykgPiAtXCIsIGlucHV0U3RyLmluZGV4T2YoJ2xvZ2luJykgIT09IC0xKTtcblx0XHQvLyBzd2l0Y2ggKGlucHV0U3RyKSB7XG5cdFx0XHRpZihpbnB1dFN0ci5pbmNsdWRlcygnbG9naW4nKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGxvZ2luXCIpXG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihpbnB1dFN0ci5pbmNsdWRlcygnbG9nb3V0JykpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBsb2dvdXRcIilcblxuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYoaW5wdXRTdHIuaW5jbHVkZXMoJ2RlcG9zaXQnKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGRlcG9zaXRcIilcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmKGlucHV0U3RyLmluY2x1ZGVzKCd0cmFuc2ZlcicpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gdHJhbnNmZXJcIilcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cdH1cblx0Y29uc3QgY3VycmVudERhdGEgPSBpbnB1dEZpZWxkc1tjdXJyZW50TmFtZV07XG5cdGNvbnNvbGUubG9nKFwiY3VycmVudERhdGFcIiwgY3VycmVudERhdGEpO1xuXHRyZXR1cm4gKFxuXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ30+XG5cdFx0XHQ8Qm94IGJvcmRlclN0eWxlPVwicm91bmRcIiBib3JkZXJDb2xvcj1cImdyZWVuXCI+XG5cdFx0XHRcdDxUZXh0PldlbGNvbWUgPC9UZXh0PlxuXHRcdFx0PC9Cb3g+XG5cdFx0XHR7aW5wdXRGaWVsZHMubWFwKChmaWVsZCwgaW5kZXgpPT4ge1xuXHRcdFx0XHRyZXR1cm4oXG5cdFx0XHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ31cblx0XHRcdFx0XHRcdCBrZXk9e2luZGV4fT5cblx0XHRcdFx0XHQ8VGV4dElucHV0XG5cdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj17Jyd9XG5cdFx0XHRcdFx0XHR2YWx1ZT17Y3VycmVudElucHV0fVxuXHRcdFx0XHRcdFx0b25DaGFuZ2U9e3NldEN1cnJlbnRJbnB1dH1cblx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PFRleHQ+e2ZpZWxkLm91dHB1dFRleHR9PC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQpXG5cdFx0XHR9KX1cblxuXG5cdFx0PC9Cb3g+XG5cblx0KVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXSwibWFwcGluZ3MiOiJBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLElBQUk7RUFBRUMsR0FBRztFQUFFQztBQUFTLENBQUMsR0FBR0gsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUM5QyxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDSyxPQUFPO0FBRW5ELE1BQU1DLEdBQUcsR0FBRyxDQUFDO0VBQUNDLElBQUksR0FBRztBQUFVLENBQUMsS0FBSztFQUNwQyxNQUFNO0lBQUNDLFNBQVM7SUFBRUM7RUFBUSxDQUFDLEdBQUdWLEtBQUs7RUFDbkMsTUFBTSxDQUFDVyxXQUFXLEVBQUVDLGNBQWMsQ0FBQyxHQUFHRixRQUFRLENBQUMsVUFBVSxDQUFDO0VBQzFELE1BQU0sQ0FBQ0csV0FBVyxFQUFFQyxjQUFjLENBQUMsR0FBR0osUUFBUSxDQUFDLENBQUM7SUFDL0MsVUFBVSxFQUFFO01BQ1hLLFNBQVMsRUFBRSxDQUFDO1FBQ1hDLFNBQVMsRUFBRSxFQUFFO1FBQ2JDLFVBQVUsRUFBRSxFQUFFO1FBQ2RDLGFBQWEsRUFBRTtNQUNoQixDQUFDLENBQUM7TUFDRkMsT0FBTyxFQUFFLENBQUM7TUFDVkMsU0FBUyxFQUFFLENBQUM7TUFDWkMsTUFBTSxFQUFFLEVBQUU7TUFDVkMsUUFBUSxFQUFFO0lBQ1g7RUFFRCxDQUFDLENBQUMsQ0FBQztFQUNILE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxlQUFlLENBQUMsR0FBR2QsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUVwRE4sUUFBUSxDQUFDLENBQUNxQixLQUFLLEVBQUVDLEdBQUcsS0FBSztJQUd4QixJQUFJQSxHQUFHLENBQUNDLFNBQVMsRUFBRTtNQUNsQjtJQUFBO0lBR0QsSUFBR0QsR0FBRyxDQUFDRSxNQUFNLEVBQUU7TUFDZEMsT0FBTyxDQUFDQyxHQUFHLENBQUMsdUJBQXVCLEVBQUVQLFlBQVksQ0FBQztNQUNsRFEsaUJBQWlCLENBQUNSLFlBQVksQ0FBQztJQUNoQztFQUVELENBQUMsQ0FBQztFQUVGLE1BQU9RLGlCQUFpQixHQUFJQyxRQUFRLElBQUs7SUFDeENILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDZCQUE2QixFQUFFRSxRQUFRLENBQUM7SUFDcERILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHdEQUF3RCxFQUFFRSxRQUFRLENBQUNDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqR0osT0FBTyxDQUFDQyxHQUFHLENBQUMsMkRBQTJELEVBQUVFLFFBQVEsQ0FBQ0UsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzFHO0lBQ0MsSUFBR0YsUUFBUSxDQUFDQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7TUFDOUJKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFVBQVUsQ0FBQztNQUN2QixPQUFPLENBQUM7SUFDVCxDQUFDLE1BQ0ksSUFBR0UsUUFBUSxDQUFDQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7TUFDcENKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFdBQVcsQ0FBQztNQUV4QixPQUFPLENBQUM7SUFDVCxDQUFDLE1BQ0ksSUFBR0UsUUFBUSxDQUFDQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7TUFDckNKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFlBQVksQ0FBQztNQUN6QixPQUFPLENBQUM7SUFDVCxDQUFDLE1BQ0ksSUFBR0UsUUFBUSxDQUFDQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7TUFDdENKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGFBQWEsQ0FBQztNQUMxQixPQUFPLENBQUM7SUFDVDtFQUNGLENBQUM7RUFDRCxNQUFNSyxXQUFXLEdBQUd0QixXQUFXLENBQUNGLFdBQVcsQ0FBQztFQUM1Q2tCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGFBQWEsRUFBRUssV0FBVyxDQUFDO0VBQ3ZDLG9CQUVDLG9CQUFDLEdBQUc7SUFBQyxhQUFhLEVBQUU7RUFBUyxnQkFDNUIsb0JBQUMsR0FBRztJQUFDLFdBQVcsRUFBQyxPQUFPO0lBQUMsV0FBVyxFQUFDO0VBQU8sZ0JBQzNDLG9CQUFDLElBQUksbUJBQWdCLENBQ2hCLEVBQ0x0QixXQUFXLENBQUN1QixHQUFHLENBQUMsQ0FBQ0MsS0FBSyxFQUFFQyxLQUFLLEtBQUk7SUFDakMsb0JBQ0Msb0JBQUMsR0FBRztNQUFDLGFBQWEsRUFBRSxRQUFTO01BQzNCLEdBQUcsRUFBRUE7SUFBTSxnQkFDYixvQkFBQyxTQUFTO01BQ1QsV0FBVyxFQUFFLEVBQUc7TUFDaEIsS0FBSyxFQUFFZixZQUFhO01BQ3BCLFFBQVEsRUFBRUM7SUFBZ0IsRUFDekIsZUFDRCxvQkFBQyxJQUFJLFFBQUVhLEtBQUssQ0FBQ3BCLFVBQVUsQ0FBUSxDQUMxQjtFQUVSLENBQUMsQ0FBQyxDQUdHO0FBR1IsQ0FBQztBQUVEc0IsTUFBTSxDQUFDQyxPQUFPLEdBQUdqQyxHQUFHIn0=