const React = require('react');
const {
  Text,
  Box,
  useInput
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [inputFields, setInputFields] = useState([{
    inputText: '',
    outputText: ''
  }]);
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    console.log("currentInput", currentInput, typeof currentInput);
    console.log("useInput handler called input", input);
    console.log("useInput handler called key", input);
    setCurrentInput(currentInput + input);
    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed");
    }
  });
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), inputFields.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: field.inputText ?? currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiQXBwIiwibmFtZSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiaW5wdXRGaWVsZHMiLCJzZXRJbnB1dEZpZWxkcyIsImlucHV0VGV4dCIsIm91dHB1dFRleHQiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsImNvbnNvbGUiLCJsb2ciLCJsZWZ0QXJyb3ciLCJyZXR1cm4iLCJtYXAiLCJmaWVsZCIsImluZGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBUZXh0LCBCb3gsIHVzZUlucHV0IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cbmNvbnN0IEFwcCA9ICh7bmFtZSA9ICdTdHJhbmdlcid9KSA9PiB7XG5cdGNvbnN0IHt1c2VFZmZlY3QsIHVzZVN0YXRlfSA9IFJlYWN0O1xuXHRjb25zdCBbaW5wdXRGaWVsZHMsIHNldElucHV0RmllbGRzXSA9IHVzZVN0YXRlKFt7XG5cdFx0aW5wdXRUZXh0OiAnJyxcblx0XHRvdXRwdXRUZXh0OiAnJ1xuXHR9XSk7XG5cdGNvbnN0IFtjdXJyZW50SW5wdXQsIHNldEN1cnJlbnRJbnB1dF0gPSB1c2VTdGF0ZSgnJyk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRjb25zb2xlLmxvZyhcImN1cnJlbnRJbnB1dFwiLCBjdXJyZW50SW5wdXQsIHR5cGVvZiBjdXJyZW50SW5wdXQpO1xuXHRcdGNvbnNvbGUubG9nKFwidXNlSW5wdXQgaGFuZGxlciBjYWxsZWQgaW5wdXRcIiwgaW5wdXQpXG5cdFx0Y29uc29sZS5sb2coXCJ1c2VJbnB1dCBoYW5kbGVyIGNhbGxlZCBrZXlcIiwgaW5wdXQpXG5cblx0XHRzZXRDdXJyZW50SW5wdXQoY3VycmVudElucHV0ICsgaW5wdXQpXG5cdFx0aWYgKGtleS5sZWZ0QXJyb3cpIHtcblx0XHRcdC8vIExlZnQgYXJyb3cga2V5IHByZXNzZWRcblx0XHR9XG5cdFx0aWYoa2V5LnJldHVybikge1xuXHRcdFx0Y29uc29sZS5sb2coXCJydHVybiBrZXkgd2FzIHByZXNzZWRcIilcblx0XHR9XG5cdH0pO1xuXG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfT5cblx0XHRcdDxCb3ggYm9yZGVyU3R5bGU9XCJyb3VuZFwiIGJvcmRlckNvbG9yPVwiZ3JlZW5cIj5cblx0XHRcdFx0PFRleHQ+V2VsY29tZSA8L1RleHQ+XG5cdFx0XHQ8L0JveD5cblx0XHRcdHtpbnB1dEZpZWxkcy5tYXAoKGZpZWxkLCBpbmRleCk9PiB7XG5cdFx0XHRcdHJldHVybihcblx0XHRcdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfVxuXHRcdFx0XHRcdFx0IGtleT17aW5kZXh9PlxuXHRcdFx0XHRcdDxUZXh0SW5wdXRcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPXsnJ31cblx0XHRcdFx0XHRcdHZhbHVlPXtmaWVsZC5pbnB1dFRleHQgPz8gY3VycmVudElucHV0fVxuXHRcdFx0XHRcdFx0b25DaGFuZ2U9e3NldEN1cnJlbnRJbnB1dH1cblx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PFRleHQ+e2ZpZWxkLm91dHB1dFRleHR9PC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQpXG5cdFx0XHR9KX1cblxuXG5cdFx0PC9Cb3g+XG5cblx0KVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXSwibWFwcGluZ3MiOiJBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLElBQUk7RUFBRUMsR0FBRztFQUFFQztBQUFTLENBQUMsR0FBR0gsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUM5QyxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDSyxPQUFPO0FBRW5ELE1BQU1DLEdBQUcsR0FBRyxDQUFDO0VBQUNDLElBQUksR0FBRztBQUFVLENBQUMsS0FBSztFQUNwQyxNQUFNO0lBQUNDLFNBQVM7SUFBRUM7RUFBUSxDQUFDLEdBQUdWLEtBQUs7RUFDbkMsTUFBTSxDQUFDVyxXQUFXLEVBQUVDLGNBQWMsQ0FBQyxHQUFHRixRQUFRLENBQUMsQ0FBQztJQUMvQ0csU0FBUyxFQUFFLEVBQUU7SUFDYkMsVUFBVSxFQUFFO0VBQ2IsQ0FBQyxDQUFDLENBQUM7RUFDSCxNQUFNLENBQUNDLFlBQVksRUFBRUMsZUFBZSxDQUFDLEdBQUdOLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFFcEROLFFBQVEsQ0FBQyxDQUFDYSxLQUFLLEVBQUVDLEdBQUcsS0FBSztJQUN4QkMsT0FBTyxDQUFDQyxHQUFHLENBQUMsY0FBYyxFQUFFTCxZQUFZLEVBQUUsT0FBT0EsWUFBWSxDQUFDO0lBQzlESSxPQUFPLENBQUNDLEdBQUcsQ0FBQywrQkFBK0IsRUFBRUgsS0FBSyxDQUFDO0lBQ25ERSxPQUFPLENBQUNDLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRUgsS0FBSyxDQUFDO0lBRWpERCxlQUFlLENBQUNELFlBQVksR0FBR0UsS0FBSyxDQUFDO0lBQ3JDLElBQUlDLEdBQUcsQ0FBQ0csU0FBUyxFQUFFO01BQ2xCO0lBQUE7SUFFRCxJQUFHSCxHQUFHLENBQUNJLE1BQU0sRUFBRTtNQUNkSCxPQUFPLENBQUNDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQztJQUNyQztFQUNELENBQUMsQ0FBQztFQUdGLG9CQUNDLG9CQUFDLEdBQUc7SUFBQyxhQUFhLEVBQUU7RUFBUyxnQkFDNUIsb0JBQUMsR0FBRztJQUFDLFdBQVcsRUFBQyxPQUFPO0lBQUMsV0FBVyxFQUFDO0VBQU8sZ0JBQzNDLG9CQUFDLElBQUksbUJBQWdCLENBQ2hCLEVBQ0xULFdBQVcsQ0FBQ1ksR0FBRyxDQUFDLENBQUNDLEtBQUssRUFBRUMsS0FBSyxLQUFJO0lBQ2pDLG9CQUNDLG9CQUFDLEdBQUc7TUFBQyxhQUFhLEVBQUUsUUFBUztNQUMzQixHQUFHLEVBQUVBO0lBQU0sZ0JBQ2Isb0JBQUMsU0FBUztNQUNULFdBQVcsRUFBRSxFQUFHO01BQ2hCLEtBQUssRUFBRUQsS0FBSyxDQUFDWCxTQUFTLElBQUlFLFlBQWE7TUFDdkMsUUFBUSxFQUFFQztJQUFnQixFQUN6QixlQUNELG9CQUFDLElBQUksUUFBRVEsS0FBSyxDQUFDVixVQUFVLENBQVEsQ0FDMUI7RUFFUixDQUFDLENBQUMsQ0FHRztBQUdSLENBQUM7QUFFRFksTUFBTSxDQUFDQyxPQUFPLEdBQUdwQixHQUFHIn0=