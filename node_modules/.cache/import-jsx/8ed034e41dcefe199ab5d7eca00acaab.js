"use strict";

const React = require('react');
const {
  Text,
  Box,
  useInput,
  Newline
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const dummyInputData = [];
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState({});
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const getData = name => {
    name = name || currentName;
    return inputFields[name];
  };
  const createNewNameData = obj => {
    const {
      name,
      balance = 0,
      owedMoney = 0
    } = obj;
    return {
      [name]: {
        inputData: [{
          inputType: 'login',
          inputText: `login ${name}`,
          outputText: `Hello, ${name}! \nYour balance is ${balance}`
        }],
        balance: 0,
        owedMoney: 0,
        owedTo: '',
        owedFrom: ''
      }
    };
  };
  const updateDataInState = inputStr => {
    if (inputStr.includes('login')) {
      console.log("in login");
      const name = inputStr.split(' ')[1];
      const getDataFromState = getData(name);

      // if(!getDataFromState) {
      // 	const createdData = createNewNameData({name}) ;
      // 	setInputFields({...inputFields, ...createdData})
      // 	setCurrentName(name)
      // 	setCurrentInput('')
      // }

      return 1;
    } else if (inputStr.includes('logout')) {
      console.log("in logout");
      return 1;
    } else if (inputStr.includes('deposit')) {
      console.log("in deposit");
      const getDataFromState = getData(name);
      return 1;
    } else if (inputStr.includes('transfer')) {
      console.log("in transfer");
      return 1;
    }
  };
  const currentData = getData();
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }), /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(TextInput, {
    placeholder: '',
    value: currentInput,
    onChange: setCurrentInput
  }), /*#__PURE__*/React.createElement(Newline, null)));
};
module.exports = App;

// const React = require("react");
// const { Text, Box } = require("ink");
// const App = ({ name = "Stranger", from = "London" }) => (
// 	<Box borderStyle="round" borderColor="yellow">
// 		<Text>
// 			Hello,{""}
// 			<Text color="green">
// 				{name} from {from}
// 			</Text>
// 		</Text>
// 	</Box>
// );
// module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,