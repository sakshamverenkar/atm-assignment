const React = require('react');
const {
  Text,
  Box,
  useInput
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [inputFields, setInputFields] = useState([{
    inputText: '',
    outputText: ''
  }]);
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    // console.log("currentInput", currentInput, typeof currentInput);
    // console.log("useInput handler called input", input)
    // console.log("useInput handler called key", key)

    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const updateDataInState = currentInput => {
    switch (currentInput) {
      case currentInput.includes('login'):
        console.log("in login");
        break;
      case currentInput.includes('logout'):
        console.log("in logout");
        break;
      case currentInput.includes('deposit'):
        console.log("in deposit");
        break;
      case currentInput.includes('transfer'):
        console.log("in trasnfer");
        break;
      default:
        console.log("in break");
    }
  };
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), inputFields.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiQXBwIiwibmFtZSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiaW5wdXRGaWVsZHMiLCJzZXRJbnB1dEZpZWxkcyIsImlucHV0VGV4dCIsIm91dHB1dFRleHQiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsImxlZnRBcnJvdyIsInJldHVybiIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGVEYXRhSW5TdGF0ZSIsImluY2x1ZGVzIiwibWFwIiwiZmllbGQiLCJpbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1aS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgVGV4dCwgQm94LCB1c2VJbnB1dCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoXCJpbmstdGV4dC1pbnB1dFwiKS5kZWZhdWx0O1xuXG5jb25zdCBBcHAgPSAoe25hbWUgPSAnU3RyYW5nZXInfSkgPT4ge1xuXHRjb25zdCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gPSBSZWFjdDtcblx0Y29uc3QgW2lucHV0RmllbGRzLCBzZXRJbnB1dEZpZWxkc10gPSB1c2VTdGF0ZShbe1xuXHRcdGlucHV0VGV4dDogJycsXG5cdFx0b3V0cHV0VGV4dDogJydcblx0fV0pO1xuXHRjb25zdCBbY3VycmVudElucHV0LCBzZXRDdXJyZW50SW5wdXRdID0gdXNlU3RhdGUoJycpO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCJjdXJyZW50SW5wdXRcIiwgY3VycmVudElucHV0LCB0eXBlb2YgY3VycmVudElucHV0KTtcblx0XHQvLyBjb25zb2xlLmxvZyhcInVzZUlucHV0IGhhbmRsZXIgY2FsbGVkIGlucHV0XCIsIGlucHV0KVxuXHRcdC8vIGNvbnNvbGUubG9nKFwidXNlSW5wdXQgaGFuZGxlciBjYWxsZWQga2V5XCIsIGtleSlcblxuXG5cdFx0aWYgKGtleS5sZWZ0QXJyb3cpIHtcblx0XHRcdC8vIExlZnQgYXJyb3cga2V5IHByZXNzZWRcblx0XHR9XG5cblx0XHRpZihrZXkucmV0dXJuKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcInJ0dXJuIGtleSB3YXMgcHJlc3NlZFwiLCBjdXJyZW50SW5wdXQpXG5cdFx0XHR1cGRhdGVEYXRhSW5TdGF0ZShjdXJyZW50SW5wdXQpXG5cdFx0fVxuXG5cdH0pO1xuXG5cdGNvbnN0ICB1cGRhdGVEYXRhSW5TdGF0ZSA9IChjdXJyZW50SW5wdXQpID0+IHtcblx0XHRzd2l0Y2ggKGN1cnJlbnRJbnB1dCkge1xuXHRcdFx0Y2FzZSBjdXJyZW50SW5wdXQuaW5jbHVkZXMoJ2xvZ2luJyk6XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gbG9naW5cIilcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIGN1cnJlbnRJbnB1dC5pbmNsdWRlcygnbG9nb3V0Jyk6XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gbG9nb3V0XCIpXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBjdXJyZW50SW5wdXQuaW5jbHVkZXMoJ2RlcG9zaXQnKTpcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBkZXBvc2l0XCIpXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBjdXJyZW50SW5wdXQuaW5jbHVkZXMoJ3RyYW5zZmVyJyk6XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gdHJhc25mZXJcIilcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGJyZWFrXCIpXG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfT5cblx0XHRcdDxCb3ggYm9yZGVyU3R5bGU9XCJyb3VuZFwiIGJvcmRlckNvbG9yPVwiZ3JlZW5cIj5cblx0XHRcdFx0PFRleHQ+V2VsY29tZSA8L1RleHQ+XG5cdFx0XHQ8L0JveD5cblx0XHRcdHtpbnB1dEZpZWxkcy5tYXAoKGZpZWxkLCBpbmRleCk9PiB7XG5cdFx0XHRcdHJldHVybihcblx0XHRcdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfVxuXHRcdFx0XHRcdFx0IGtleT17aW5kZXh9PlxuXHRcdFx0XHRcdDxUZXh0SW5wdXRcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPXsnJ31cblx0XHRcdFx0XHRcdHZhbHVlPXtjdXJyZW50SW5wdXR9XG5cdFx0XHRcdFx0XHRvbkNoYW5nZT17c2V0Q3VycmVudElucHV0fVxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQ8VGV4dD57ZmllbGQub3V0cHV0VGV4dH08L1RleHQ+XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdClcblx0XHRcdH0pfVxuXG5cblx0XHQ8L0JveD5cblxuXHQpXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsSUFBSTtFQUFFQyxHQUFHO0VBQUVDO0FBQVMsQ0FBQyxHQUFHSCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQzlDLE1BQU1JLFNBQVMsR0FBR0osT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUNLLE9BQU87QUFFbkQsTUFBTUMsR0FBRyxHQUFHLENBQUM7RUFBQ0MsSUFBSSxHQUFHO0FBQVUsQ0FBQyxLQUFLO0VBQ3BDLE1BQU07SUFBQ0MsU0FBUztJQUFFQztFQUFRLENBQUMsR0FBR1YsS0FBSztFQUNuQyxNQUFNLENBQUNXLFdBQVcsRUFBRUMsY0FBYyxDQUFDLEdBQUdGLFFBQVEsQ0FBQyxDQUFDO0lBQy9DRyxTQUFTLEVBQUUsRUFBRTtJQUNiQyxVQUFVLEVBQUU7RUFDYixDQUFDLENBQUMsQ0FBQztFQUNILE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxlQUFlLENBQUMsR0FBR04sUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUVwRE4sUUFBUSxDQUFDLENBQUNhLEtBQUssRUFBRUMsR0FBRyxLQUFLO0lBQ3hCO0lBQ0E7SUFDQTs7SUFHQSxJQUFJQSxHQUFHLENBQUNDLFNBQVMsRUFBRTtNQUNsQjtJQUFBO0lBR0QsSUFBR0QsR0FBRyxDQUFDRSxNQUFNLEVBQUU7TUFDZEMsT0FBTyxDQUFDQyxHQUFHLENBQUMsdUJBQXVCLEVBQUVQLFlBQVksQ0FBQztNQUNsRFEsaUJBQWlCLENBQUNSLFlBQVksQ0FBQztJQUNoQztFQUVELENBQUMsQ0FBQztFQUVGLE1BQU9RLGlCQUFpQixHQUFJUixZQUFZLElBQUs7SUFDNUMsUUFBUUEsWUFBWTtNQUNuQixLQUFLQSxZQUFZLENBQUNTLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDbENILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUN2QjtNQUNELEtBQUtQLFlBQVksQ0FBQ1MsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNuQ0gsT0FBTyxDQUFDQyxHQUFHLENBQUMsV0FBVyxDQUFDO1FBQ3hCO01BQ0QsS0FBS1AsWUFBWSxDQUFDUyxRQUFRLENBQUMsU0FBUyxDQUFDO1FBQ3BDSCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxZQUFZLENBQUM7UUFDekI7TUFDRCxLQUFLUCxZQUFZLENBQUNTLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDckNILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGFBQWEsQ0FBQztRQUMxQjtNQUNEO1FBQ0NELE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFVBQVUsQ0FBQztJQUFBO0VBRTFCLENBQUM7RUFFRCxvQkFDQyxvQkFBQyxHQUFHO0lBQUMsYUFBYSxFQUFFO0VBQVMsZ0JBQzVCLG9CQUFDLEdBQUc7SUFBQyxXQUFXLEVBQUMsT0FBTztJQUFDLFdBQVcsRUFBQztFQUFPLGdCQUMzQyxvQkFBQyxJQUFJLG1CQUFnQixDQUNoQixFQUNMWCxXQUFXLENBQUNjLEdBQUcsQ0FBQyxDQUFDQyxLQUFLLEVBQUVDLEtBQUssS0FBSTtJQUNqQyxvQkFDQyxvQkFBQyxHQUFHO01BQUMsYUFBYSxFQUFFLFFBQVM7TUFDM0IsR0FBRyxFQUFFQTtJQUFNLGdCQUNiLG9CQUFDLFNBQVM7TUFDVCxXQUFXLEVBQUUsRUFBRztNQUNoQixLQUFLLEVBQUVaLFlBQWE7TUFDcEIsUUFBUSxFQUFFQztJQUFnQixFQUN6QixlQUNELG9CQUFDLElBQUksUUFBRVUsS0FBSyxDQUFDWixVQUFVLENBQVEsQ0FDMUI7RUFFUixDQUFDLENBQUMsQ0FHRztBQUdSLENBQUM7QUFFRGMsTUFBTSxDQUFDQyxPQUFPLEdBQUd0QixHQUFHIn0=