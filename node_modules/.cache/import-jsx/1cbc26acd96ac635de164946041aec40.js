const React = require('react');
const {
  Text,
  Box,
  useInput,
  Newline
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState({
    'stranger': {
      inputData: [''],
      balance: 0,
      owedMoney: 0,
      owedTo: '',
      owedFrom: ''
    }
  });
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const getData = name => {
    name = name || currentName;
    return inputFields[name];
  };
  const createNewNameData = name => ({
    [name]: {
      inputData: [''],
      balance: 0,
      owedMoney: 0,
      owedTo: '',
      owedFrom: ''
    }
  });
  const updateDataInState = inputStr => {
    console.log("currentInput called line 32", inputStr);
    console.log("currentInput called line 33 inputStr.includes('login')", inputStr.includes('login'));
    console.log("currentInput called line 34 inputStr.indexOf('login') > -", inputStr.indexOf('login') !== -1);
    // switch (inputStr) {
    if (inputStr.includes('login')) {
      console.log("in login");
      const name = inputStr.split(' ')[1];
      console.log("name", name);
      const getDataFromState = getData(name);
      console.log("getDataFromState called line 62", getDataFromState);
      const createdData = createNewNameData(name);
      console.log("createdData", createdData);
      return 1;
    } else if (inputStr.includes('logout')) {
      console.log("in logout");
      return 1;
    } else if (inputStr.includes('deposit')) {
      console.log("in deposit");
      return 1;
    } else if (inputStr.includes('transfer')) {
      console.log("in transfer");
      return 1;
    }
  };
  const currentData = getData();
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), currentData?.inputData?.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Newline, null));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,