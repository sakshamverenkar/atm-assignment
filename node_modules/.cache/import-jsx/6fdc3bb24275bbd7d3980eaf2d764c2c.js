const React = require('react');
const {
  Text,
  Box,
  useInput
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [inputFields, setInputFields] = useState([{
    inputText: '',
    outputText: ''
  }]);
  const [currentInput, setCurrentInput] = useState({});
  useInput((input, key) => {
    console.log("currentInput", currentInput);
    console.log("useInput handler called input", input);
    console.log("useInput handler called key", input);
    setCurrentInput(currentInput + key);
    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed");
    }
  });
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), inputFields.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: field.inputText ?? currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiQXBwIiwibmFtZSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiaW5wdXRGaWVsZHMiLCJzZXRJbnB1dEZpZWxkcyIsImlucHV0VGV4dCIsIm91dHB1dFRleHQiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsImNvbnNvbGUiLCJsb2ciLCJsZWZ0QXJyb3ciLCJyZXR1cm4iLCJtYXAiLCJmaWVsZCIsImluZGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBUZXh0LCBCb3gsIHVzZUlucHV0IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cbmNvbnN0IEFwcCA9ICh7bmFtZSA9ICdTdHJhbmdlcid9KSA9PiB7XG5cdGNvbnN0IHt1c2VFZmZlY3QsIHVzZVN0YXRlfSA9IFJlYWN0O1xuXHRjb25zdCBbaW5wdXRGaWVsZHMsIHNldElucHV0RmllbGRzXSA9IHVzZVN0YXRlKFt7XG5cdFx0aW5wdXRUZXh0OiAnJyxcblx0XHRvdXRwdXRUZXh0OiAnJ1xuXHR9XSk7XG5cdGNvbnN0IFtjdXJyZW50SW5wdXQsIHNldEN1cnJlbnRJbnB1dF0gPSB1c2VTdGF0ZSh7fSk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHRjb25zb2xlLmxvZyhcImN1cnJlbnRJbnB1dFwiLCBjdXJyZW50SW5wdXQpO1xuXHRcdGNvbnNvbGUubG9nKFwidXNlSW5wdXQgaGFuZGxlciBjYWxsZWQgaW5wdXRcIiwgaW5wdXQpXG5cdFx0Y29uc29sZS5sb2coXCJ1c2VJbnB1dCBoYW5kbGVyIGNhbGxlZCBrZXlcIiwgaW5wdXQpXG5cblx0XHRzZXRDdXJyZW50SW5wdXQoY3VycmVudElucHV0ICsga2V5KVxuXHRcdGlmIChrZXkubGVmdEFycm93KSB7XG5cdFx0XHQvLyBMZWZ0IGFycm93IGtleSBwcmVzc2VkXG5cdFx0fVxuXHRcdGlmKGtleS5yZXR1cm4pIHtcblx0XHRcdGNvbnNvbGUubG9nKFwicnR1cm4ga2V5IHdhcyBwcmVzc2VkXCIpXG5cdFx0fVxuXHR9KTtcblxuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ30+XG5cdFx0XHQ8Qm94IGJvcmRlclN0eWxlPVwicm91bmRcIiBib3JkZXJDb2xvcj1cImdyZWVuXCI+XG5cdFx0XHRcdDxUZXh0PldlbGNvbWUgPC9UZXh0PlxuXHRcdFx0PC9Cb3g+XG5cdFx0XHR7aW5wdXRGaWVsZHMubWFwKChmaWVsZCwgaW5kZXgpPT4ge1xuXHRcdFx0XHRyZXR1cm4oXG5cdFx0XHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ31cblx0XHRcdFx0XHRcdCBrZXk9e2luZGV4fT5cblx0XHRcdFx0XHQ8VGV4dElucHV0XG5cdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj17Jyd9XG5cdFx0XHRcdFx0XHR2YWx1ZT17ZmllbGQuaW5wdXRUZXh0ID8/IGN1cnJlbnRJbnB1dH1cblx0XHRcdFx0XHRcdG9uQ2hhbmdlPXtzZXRDdXJyZW50SW5wdXR9XG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdDxUZXh0PntmaWVsZC5vdXRwdXRUZXh0fTwvVGV4dD5cblx0XHRcdFx0XHQ8L0JveD5cblx0XHRcdFx0KVxuXHRcdFx0fSl9XG5cblxuXHRcdDwvQm94PlxuXG5cdClcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxJQUFJO0VBQUVDLEdBQUc7RUFBRUM7QUFBUyxDQUFDLEdBQUdILE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDOUMsTUFBTUksU0FBUyxHQUFHSixPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ0ssT0FBTztBQUVuRCxNQUFNQyxHQUFHLEdBQUcsQ0FBQztFQUFDQyxJQUFJLEdBQUc7QUFBVSxDQUFDLEtBQUs7RUFDcEMsTUFBTTtJQUFDQyxTQUFTO0lBQUVDO0VBQVEsQ0FBQyxHQUFHVixLQUFLO0VBQ25DLE1BQU0sQ0FBQ1csV0FBVyxFQUFFQyxjQUFjLENBQUMsR0FBR0YsUUFBUSxDQUFDLENBQUM7SUFDL0NHLFNBQVMsRUFBRSxFQUFFO0lBQ2JDLFVBQVUsRUFBRTtFQUNiLENBQUMsQ0FBQyxDQUFDO0VBQ0gsTUFBTSxDQUFDQyxZQUFZLEVBQUVDLGVBQWUsQ0FBQyxHQUFHTixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFFcEROLFFBQVEsQ0FBQyxDQUFDYSxLQUFLLEVBQUVDLEdBQUcsS0FBSztJQUN4QkMsT0FBTyxDQUFDQyxHQUFHLENBQUMsY0FBYyxFQUFFTCxZQUFZLENBQUM7SUFDekNJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLCtCQUErQixFQUFFSCxLQUFLLENBQUM7SUFDbkRFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDZCQUE2QixFQUFFSCxLQUFLLENBQUM7SUFFakRELGVBQWUsQ0FBQ0QsWUFBWSxHQUFHRyxHQUFHLENBQUM7SUFDbkMsSUFBSUEsR0FBRyxDQUFDRyxTQUFTLEVBQUU7TUFDbEI7SUFBQTtJQUVELElBQUdILEdBQUcsQ0FBQ0ksTUFBTSxFQUFFO01BQ2RILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHVCQUF1QixDQUFDO0lBQ3JDO0VBQ0QsQ0FBQyxDQUFDO0VBR0Ysb0JBQ0Msb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBRTtFQUFTLGdCQUM1QixvQkFBQyxHQUFHO0lBQUMsV0FBVyxFQUFDLE9BQU87SUFBQyxXQUFXLEVBQUM7RUFBTyxnQkFDM0Msb0JBQUMsSUFBSSxtQkFBZ0IsQ0FDaEIsRUFDTFQsV0FBVyxDQUFDWSxHQUFHLENBQUMsQ0FBQ0MsS0FBSyxFQUFFQyxLQUFLLEtBQUk7SUFDakMsb0JBQ0Msb0JBQUMsR0FBRztNQUFDLGFBQWEsRUFBRSxRQUFTO01BQzNCLEdBQUcsRUFBRUE7SUFBTSxnQkFDYixvQkFBQyxTQUFTO01BQ1QsV0FBVyxFQUFFLEVBQUc7TUFDaEIsS0FBSyxFQUFFRCxLQUFLLENBQUNYLFNBQVMsSUFBSUUsWUFBYTtNQUN2QyxRQUFRLEVBQUVDO0lBQWdCLEVBQ3pCLGVBQ0Qsb0JBQUMsSUFBSSxRQUFFUSxLQUFLLENBQUNWLFVBQVUsQ0FBUSxDQUMxQjtFQUVSLENBQUMsQ0FBQyxDQUdHO0FBR1IsQ0FBQztBQUVEWSxNQUFNLENBQUNDLE9BQU8sR0FBR3BCLEdBQUcifQ==