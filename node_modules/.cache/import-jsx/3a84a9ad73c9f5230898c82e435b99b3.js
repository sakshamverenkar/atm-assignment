const React = require('react');
const {
  Text,
  Box,
  useInput,
  Newline
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState({
    'stranger': {
      inputData: [''],
      balance: 0,
      owedMoney: 0,
      owedTo: '',
      owedFrom: ''
    }
  });
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const createNewNameData = name => ({
    [name]: {
      inputData: [''],
      balance: 0,
      owedMoney: 0,
      owedTo: '',
      owedFrom: ''
    }
  });
  const updateDataInState = inputStr => {
    console.log("currentInput called line 32", inputStr);
    console.log("currentInput called line 33 inputStr.includes('login')", inputStr.includes('login'));
    console.log("currentInput called line 34 inputStr.indexOf('login') > -", inputStr.indexOf('login') !== -1);
    // switch (inputStr) {
    if (inputStr.includes('login')) {
      console.log("in login");
      const name = inputStr.split(' ')[1];
      console.log("name", name);
      const createdData = createNewNameData(name);
      console.log("createdData", createdData);
      return 1;
    } else if (inputStr.includes('logout')) {
      console.log("in logout");
      return 1;
    } else if (inputStr.includes('deposit')) {
      console.log("in deposit");
      return 1;
    } else if (inputStr.includes('transfer')) {
      console.log("in transfer");
      return 1;
    }
  };
  const currentData = inputFields[currentName];
  console.log("currentData", currentData);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), currentData?.inputData?.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Newline, null));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJOZXdsaW5lIiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIkFwcCIsIm5hbWUiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsImN1cnJlbnROYW1lIiwic2V0Q3VycmVudE5hbWUiLCJpbnB1dEZpZWxkcyIsInNldElucHV0RmllbGRzIiwiaW5wdXREYXRhIiwiYmFsYW5jZSIsIm93ZWRNb25leSIsIm93ZWRUbyIsIm93ZWRGcm9tIiwiY3VycmVudElucHV0Iiwic2V0Q3VycmVudElucHV0IiwiaW5wdXQiLCJrZXkiLCJsZWZ0QXJyb3ciLCJyZXR1cm4iLCJjb25zb2xlIiwibG9nIiwidXBkYXRlRGF0YUluU3RhdGUiLCJjcmVhdGVOZXdOYW1lRGF0YSIsImlucHV0U3RyIiwiaW5jbHVkZXMiLCJpbmRleE9mIiwic3BsaXQiLCJjcmVhdGVkRGF0YSIsImN1cnJlbnREYXRhIiwibWFwIiwiZmllbGQiLCJpbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1aS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgVGV4dCwgQm94LCB1c2VJbnB1dCwgTmV3bGluZSB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoXCJpbmstdGV4dC1pbnB1dFwiKS5kZWZhdWx0O1xuXG5jb25zdCBBcHAgPSAoe25hbWUgPSAnU3RyYW5nZXInfSkgPT4ge1xuXHRjb25zdCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gPSBSZWFjdDtcblx0Y29uc3QgW2N1cnJlbnROYW1lLCBzZXRDdXJyZW50TmFtZV0gPSB1c2VTdGF0ZSgnc3RyYW5nZXInKTtcblx0Y29uc3QgW2lucHV0RmllbGRzLCBzZXRJbnB1dEZpZWxkc10gPSB1c2VTdGF0ZSh7XG5cdFx0J3N0cmFuZ2VyJzoge1xuXHRcdFx0aW5wdXREYXRhOiBbJyddLFxuXHRcdFx0YmFsYW5jZTogMCxcblx0XHRcdG93ZWRNb25leTogMCxcblx0XHRcdG93ZWRUbzogJycsXG5cdFx0XHRvd2VkRnJvbTogJycsXG5cdFx0fVxuXG5cdH0pO1xuXHRjb25zdCBbY3VycmVudElucHV0LCBzZXRDdXJyZW50SW5wdXRdID0gdXNlU3RhdGUoJycpO1xuXG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblxuXHRcdGlmIChrZXkubGVmdEFycm93KSB7XG5cdFx0XHQvLyBMZWZ0IGFycm93IGtleSBwcmVzc2VkXG5cdFx0fVxuXG5cdFx0aWYoa2V5LnJldHVybikge1xuXHRcdFx0Y29uc29sZS5sb2coXCJydHVybiBrZXkgd2FzIHByZXNzZWRcIiwgY3VycmVudElucHV0KVxuXHRcdFx0dXBkYXRlRGF0YUluU3RhdGUoY3VycmVudElucHV0KVxuXHRcdH1cblxuXHR9KTtcblxuXG5cdGNvbnN0IGNyZWF0ZU5ld05hbWVEYXRhID0gKG5hbWUpID0+IChcblx0XHQge1xuXHRcdFx0W25hbWVdIDoge1xuXHRcdFx0XHRpbnB1dERhdGE6IFsnJ10sXG5cdFx0XHRcdGJhbGFuY2U6IDAsXG5cdFx0XHRcdG93ZWRNb25leTogMCxcblx0XHRcdFx0b3dlZFRvOiAnJyxcblx0XHRcdFx0b3dlZEZyb206ICcnLFxuXHRcdFx0fVxuXHRcdH1cblx0XHQpXG5cblx0Y29uc3QgIHVwZGF0ZURhdGFJblN0YXRlID0gKGlucHV0U3RyKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coXCJjdXJyZW50SW5wdXQgY2FsbGVkIGxpbmUgMzJcIiwgaW5wdXRTdHIpXG5cdFx0Y29uc29sZS5sb2coXCJjdXJyZW50SW5wdXQgY2FsbGVkIGxpbmUgMzMgaW5wdXRTdHIuaW5jbHVkZXMoJ2xvZ2luJylcIiwgaW5wdXRTdHIuaW5jbHVkZXMoJ2xvZ2luJykpO1xuXHRcdGNvbnNvbGUubG9nKFwiY3VycmVudElucHV0IGNhbGxlZCBsaW5lIDM0IGlucHV0U3RyLmluZGV4T2YoJ2xvZ2luJykgPiAtXCIsIGlucHV0U3RyLmluZGV4T2YoJ2xvZ2luJykgIT09IC0xKTtcblx0XHQvLyBzd2l0Y2ggKGlucHV0U3RyKSB7XG5cdFx0XHRpZihpbnB1dFN0ci5pbmNsdWRlcygnbG9naW4nKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGxvZ2luXCIpXG5cdFx0XHRcdGNvbnN0IG5hbWUgPSBpbnB1dFN0ci5zcGxpdCgnICcpWzFdXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwibmFtZVwiLCBuYW1lKTtcblx0XHRcdFx0Y29uc3QgY3JlYXRlZERhdGEgPSBjcmVhdGVOZXdOYW1lRGF0YShuYW1lKSA7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiY3JlYXRlZERhdGFcIiwgY3JlYXRlZERhdGEpXG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihpbnB1dFN0ci5pbmNsdWRlcygnbG9nb3V0JykpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBsb2dvdXRcIilcblxuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYoaW5wdXRTdHIuaW5jbHVkZXMoJ2RlcG9zaXQnKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGRlcG9zaXRcIilcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmKGlucHV0U3RyLmluY2x1ZGVzKCd0cmFuc2ZlcicpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gdHJhbnNmZXJcIilcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cdH1cblx0Y29uc3QgY3VycmVudERhdGEgPSBpbnB1dEZpZWxkc1tjdXJyZW50TmFtZV07XG5cdGNvbnNvbGUubG9nKFwiY3VycmVudERhdGFcIiwgY3VycmVudERhdGEpO1xuXHRyZXR1cm4gKFxuXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ30+XG5cdFx0XHQ8Qm94IGJvcmRlclN0eWxlPVwicm91bmRcIiBib3JkZXJDb2xvcj1cImdyZWVuXCI+XG5cdFx0XHRcdDxUZXh0PldlbGNvbWUgPC9UZXh0PlxuXHRcdFx0PC9Cb3g+XG5cdFx0XHR7Y3VycmVudERhdGE/LmlucHV0RGF0YT8ubWFwKChmaWVsZCwgaW5kZXgpPT4ge1xuXHRcdFx0XHRyZXR1cm4oXG5cdFx0XHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ31cblx0XHRcdFx0XHRcdCBrZXk9e2luZGV4fT5cblx0XHRcdFx0XHQ8VGV4dElucHV0XG5cdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj17Jyd9XG5cdFx0XHRcdFx0XHR2YWx1ZT17Y3VycmVudElucHV0fVxuXHRcdFx0XHRcdFx0b25DaGFuZ2U9e3NldEN1cnJlbnRJbnB1dH1cblx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PE5ld2xpbmUgLz5cblx0XHRcdFx0XHRcdHsvKjxUZXh0PntmaWVsZC5vdXRwdXRUZXh0fTwvVGV4dD4qL31cblx0XHRcdFx0XHQ8L0JveD5cblx0XHRcdFx0KVxuXHRcdFx0fSl9XG5cblxuXHRcdDwvQm94PlxuXG5cdClcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxJQUFJO0VBQUVDLEdBQUc7RUFBRUMsUUFBUTtFQUFFQztBQUFRLENBQUMsR0FBR0osT0FBTyxDQUFDLEtBQUssQ0FBQztBQUN2RCxNQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDTSxPQUFPO0FBRW5ELE1BQU1DLEdBQUcsR0FBRyxDQUFDO0VBQUNDLElBQUksR0FBRztBQUFVLENBQUMsS0FBSztFQUNwQyxNQUFNO0lBQUNDLFNBQVM7SUFBRUM7RUFBUSxDQUFDLEdBQUdYLEtBQUs7RUFDbkMsTUFBTSxDQUFDWSxXQUFXLEVBQUVDLGNBQWMsQ0FBQyxHQUFHRixRQUFRLENBQUMsVUFBVSxDQUFDO0VBQzFELE1BQU0sQ0FBQ0csV0FBVyxFQUFFQyxj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