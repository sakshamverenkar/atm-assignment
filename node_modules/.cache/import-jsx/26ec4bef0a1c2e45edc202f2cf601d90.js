const React = require('react');
const {
  Text,
  Box,
  useInput
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [inputFields, setInputFields] = useState([{
    inputText: '',
    outputText: ''
  }]);
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    // console.log("currentInput", currentInput, typeof currentInput);
    // console.log("useInput handler called input", input)
    // console.log("useInput handler called key", key)

    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const updateDataInState = inputStr => {
    console.log("currentInput called line 32", inputStr);
    console.log("currentInput called line 32", inputStr.includes('login'));
    switch (inputStr) {
      case inputStr.indexOf('login') > -1:
        console.log("in login");
        break;
      case inputStr.includes('logout'):
        console.log("in logout");
        break;
      case inputStr.includes('deposit'):
        console.log("in deposit");
        break;
      case inputStr.includes('transfer'):
        console.log("in trasnfer");
        break;
      default:
        console.log("in break");
    }
  };
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), inputFields.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiQXBwIiwibmFtZSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiaW5wdXRGaWVsZHMiLCJzZXRJbnB1dEZpZWxkcyIsImlucHV0VGV4dCIsIm91dHB1dFRleHQiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsImxlZnRBcnJvdyIsInJldHVybiIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGVEYXRhSW5TdGF0ZSIsImlucHV0U3RyIiwiaW5jbHVkZXMiLCJpbmRleE9mIiwibWFwIiwiZmllbGQiLCJpbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1aS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgVGV4dCwgQm94LCB1c2VJbnB1dCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoXCJpbmstdGV4dC1pbnB1dFwiKS5kZWZhdWx0O1xuXG5jb25zdCBBcHAgPSAoe25hbWUgPSAnU3RyYW5nZXInfSkgPT4ge1xuXHRjb25zdCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gPSBSZWFjdDtcblx0Y29uc3QgW2lucHV0RmllbGRzLCBzZXRJbnB1dEZpZWxkc10gPSB1c2VTdGF0ZShbe1xuXHRcdGlucHV0VGV4dDogJycsXG5cdFx0b3V0cHV0VGV4dDogJydcblx0fV0pO1xuXHRjb25zdCBbY3VycmVudElucHV0LCBzZXRDdXJyZW50SW5wdXRdID0gdXNlU3RhdGUoJycpO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCJjdXJyZW50SW5wdXRcIiwgY3VycmVudElucHV0LCB0eXBlb2YgY3VycmVudElucHV0KTtcblx0XHQvLyBjb25zb2xlLmxvZyhcInVzZUlucHV0IGhhbmRsZXIgY2FsbGVkIGlucHV0XCIsIGlucHV0KVxuXHRcdC8vIGNvbnNvbGUubG9nKFwidXNlSW5wdXQgaGFuZGxlciBjYWxsZWQga2V5XCIsIGtleSlcblxuXG5cdFx0aWYgKGtleS5sZWZ0QXJyb3cpIHtcblx0XHRcdC8vIExlZnQgYXJyb3cga2V5IHByZXNzZWRcblx0XHR9XG5cblx0XHRpZihrZXkucmV0dXJuKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcInJ0dXJuIGtleSB3YXMgcHJlc3NlZFwiLCBjdXJyZW50SW5wdXQpXG5cdFx0XHR1cGRhdGVEYXRhSW5TdGF0ZShjdXJyZW50SW5wdXQpXG5cdFx0fVxuXG5cdH0pO1xuXG5cdGNvbnN0ICB1cGRhdGVEYXRhSW5TdGF0ZSA9IChpbnB1dFN0cikgPT4ge1xuXHRcdGNvbnNvbGUubG9nKFwiY3VycmVudElucHV0IGNhbGxlZCBsaW5lIDMyXCIsIGlucHV0U3RyKVxuXHRcdGNvbnNvbGUubG9nKFwiY3VycmVudElucHV0IGNhbGxlZCBsaW5lIDMyXCIsIGlucHV0U3RyLmluY2x1ZGVzKCdsb2dpbicpKTtcblx0XHRzd2l0Y2ggKGlucHV0U3RyKSB7XG5cdFx0XHRjYXNlIGlucHV0U3RyLmluZGV4T2YoJ2xvZ2luJykgPiAtMTpcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBsb2dpblwiKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgaW5wdXRTdHIuaW5jbHVkZXMoJ2xvZ291dCcpOlxuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGxvZ291dFwiKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgaW5wdXRTdHIuaW5jbHVkZXMoJ2RlcG9zaXQnKTpcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBkZXBvc2l0XCIpXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBpbnB1dFN0ci5pbmNsdWRlcygndHJhbnNmZXInKTpcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiB0cmFzbmZlclwiKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gYnJlYWtcIilcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj17J2NvbHVtbid9PlxuXHRcdFx0PEJveCBib3JkZXJTdHlsZT1cInJvdW5kXCIgYm9yZGVyQ29sb3I9XCJncmVlblwiPlxuXHRcdFx0XHQ8VGV4dD5XZWxjb21lIDwvVGV4dD5cblx0XHRcdDwvQm94PlxuXHRcdFx0e2lucHV0RmllbGRzLm1hcCgoZmllbGQsIGluZGV4KT0+IHtcblx0XHRcdFx0cmV0dXJuKFxuXHRcdFx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj17J2NvbHVtbid9XG5cdFx0XHRcdFx0XHQga2V5PXtpbmRleH0+XG5cdFx0XHRcdFx0PFRleHRJbnB1dFxuXHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9eycnfVxuXHRcdFx0XHRcdFx0dmFsdWU9e2N1cnJlbnRJbnB1dH1cblx0XHRcdFx0XHRcdG9uQ2hhbmdlPXtzZXRDdXJyZW50SW5wdXR9XG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdDxUZXh0PntmaWVsZC5vdXRwdXRUZXh0fTwvVGV4dD5cblx0XHRcdFx0XHQ8L0JveD5cblx0XHRcdFx0KVxuXHRcdFx0fSl9XG5cblxuXHRcdDwvQm94PlxuXG5cdClcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxJQUFJO0VBQUVDLEdBQUc7RUFBRUM7QUFBUyxDQUFDLEdBQUdILE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDOUMsTUFBTUksU0FBUyxHQUFHSixPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ0ssT0FBTztBQUVuRCxNQUFNQyxHQUFHLEdBQUcsQ0FBQztFQUFDQyxJQUFJLEdBQUc7QUFBVSxDQUFDLEtBQUs7RUFDcEMsTUFBTTtJQUFDQyxTQUFTO0lBQUVDO0VBQVEsQ0FBQyxHQUFHVixLQUFLO0VBQ25DLE1BQU0sQ0FBQ1csV0FBVyxFQUFFQyxjQUFjLENBQUMsR0FBR0YsUUFBUSxDQUFDLENBQUM7SUFDL0NHLFNBQVMsRUFBRSxFQUFFO0lBQ2JDLFVBQVUsRUFBRTtFQUNiLENBQUMsQ0FBQyxDQUFDO0VBQ0gsTUFBTSxDQUFDQyxZQUFZLEVBQUVDLGVBQWUsQ0FBQyxHQUFHTixRQUFRLENBQUMsRUFBRSxDQUFDO0VBRXBETixRQUFRLENBQUMsQ0FBQ2EsS0FBSyxFQUFFQyxHQUFHLEtBQUs7SUFDeEI7SUFDQTtJQUNBOztJQUdBLElBQUlBLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFO01BQ2xCO0lBQUE7SUFHRCxJQUFHRCxHQUFHLENBQUNFLE1BQU0sRUFBRTtNQUNkQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRVAsWUFBWSxDQUFDO01BQ2xEUSxpQkFBaUIsQ0FBQ1IsWUFBWSxDQUFDO0lBQ2hDO0VBRUQsQ0FBQyxDQUFDO0VBRUYsTUFBT1EsaUJBQWlCLEdBQUlDLFFBQVEsSUFBSztJQUN4Q0gsT0FBTyxDQUFDQyxHQUFHLENBQUMsNkJBQTZCLEVBQUVFLFFBQVEsQ0FBQztJQUNwREgsT0FBTyxDQUFDQyxHQUFHLENBQUMsNkJBQTZCLEVBQUVFLFFBQVEsQ0FBQ0MsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RFLFFBQVFELFFBQVE7TUFDZixLQUFLQSxRQUFRLENBQUNFLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbENMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUN2QjtNQUNELEtBQUtFLFFBQVEsQ0FBQ0MsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUMvQkosT0FBTyxDQUFDQyxHQUFHLENBQUMsV0FBVyxDQUFDO1FBQ3hCO01BQ0QsS0FBS0UsUUFBUSxDQUFDQyxRQUFRLENBQUMsU0FBUyxDQUFDO1FBQ2hDSixPQUFPLENBQUNDLEdBQUcsQ0FBQyxZQUFZLENBQUM7UUFDekI7TUFDRCxLQUFLRSxRQUFRLENBQUNDLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDakNKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGFBQWEsQ0FBQztRQUMxQjtNQUNEO1FBQ0NELE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFVBQVUsQ0FBQztJQUFBO0VBRTFCLENBQUM7RUFFRCxvQkFDQyxvQkFBQyxHQUFHO0lBQUMsYUFBYSxFQUFFO0VBQVMsZ0JBQzVCLG9CQUFDLEdBQUc7SUFBQyxXQUFXLEVBQUMsT0FBTztJQUFDLFdBQVcsRUFBQztFQUFPLGdCQUMzQyxvQkFBQyxJQUFJLG1CQUFnQixDQUNoQixFQUNMWCxXQUFXLENBQUNnQixHQUFHLENBQUMsQ0FBQ0MsS0FBSyxFQUFFQyxLQUFLLEtBQUk7SUFDakMsb0JBQ0Msb0JBQUMsR0FBRztNQUFDLGFBQWEsRUFBRSxRQUFTO01BQzNCLEdBQUcsRUFBRUE7SUFBTSxnQkFDYixvQkFBQyxTQUFTO01BQ1QsV0FBVyxFQUFFLEVBQUc7TUFDaEIsS0FBSyxFQUFFZCxZQUFhO01BQ3BCLFFBQVEsRUFBRUM7SUFBZ0IsRUFDekIsZUFDRCxvQkFBQyxJQUFJLFFBQUVZLEtBQUssQ0FBQ2QsVUFBVSxDQUFRLENBQzFCO0VBRVIsQ0FBQyxDQUFDLENBR0c7QUFHUixDQUFDO0FBRURnQixNQUFNLENBQUNDLE9BQU8sR0FBR3hCLEdBQUcifQ==