const React = require('react');
const {
  Text,
  Box,
  useInput,
  Newline
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const dummyInputData = [];
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState({});
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const getData = name => {
    name = name || currentName;
    console.log("inputFields line 30 called", inputFields);
    return inputFields[name];
  };
  const createNewNameData = obj => {
    const {
      name,
      balance = 0,
      owedMoney = 0
    } = obj;
    return {
      [name]: {
        inputData: [{
          inputType: 'login',
          inputText: `login ${name}`,
          outputText: `Hello, ${name}! \n Your balance is ${balance}`
        }],
        balance: 0,
        owedMoney: 0,
        owedTo: '',
        owedFrom: ''
      }
    };
  };
  const updateDataInState = inputStr => {
    console.log("currentInput called line 32", inputStr);
    console.log("currentInput called line 33 inputStr.includes('login')", inputStr.includes('login'));
    console.log("currentInput called line 34 inputStr.indexOf('login') > -", inputStr.indexOf('login') !== -1);
    if (inputStr.includes('login')) {
      console.log("in login");
      const name = inputStr.split(' ')[1];
      console.log("name", name);
      const getDataFromState = getData(name);
      console.log("getDataFromState called line 62", getDataFromState);
      if (!getDataFromState) {
        const createdData = createNewNameData({
          name
        });
        console.log("createdData", createdData);
        setInputFields({
          ...inputFields,
          ...createdData
        });
        setCurrentName(name);
      }
      return 1;
    } else if (inputStr.includes('logout')) {
      console.log("in logout");
      return 1;
    } else if (inputStr.includes('deposit')) {
      console.log("in deposit");
      return 1;
    } else if (inputStr.includes('transfer')) {
      console.log("in transfer");
      return 1;
    }
  };
  const currentData = getData();
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, currentData?.inputData?.map((field, index) => {
    console.log("field", field);
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(Text, null, "11112"), /*#__PURE__*/React.createElement(Newline, null));
  })), /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(TextInput, {
    placeholder: '',
    value: currentInput,
    onChange: setCurrentInput
  }), /*#__PURE__*/React.createElement(Newline, null)));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,