const React = require('react');
const {
  Text,
  Box,
  useInput,
  Newline
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState({
    'stranger': {
      inputData: [''],
      balance: 0,
      owedMoney: 0,
      owedTo: '',
      owedFrom: ''
    }
  });
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const updateDataInState = inputStr => {
    console.log("currentInput called line 32", inputStr);
    console.log("currentInput called line 33 inputStr.includes('login')", inputStr.includes('login'));
    console.log("currentInput called line 34 inputStr.indexOf('login') > -", inputStr.indexOf('login') !== -1);
    // switch (inputStr) {
    if (inputStr.includes('login')) {
      console.log("in login");
      const name = inputStr.split(' ')[1];
      console.log("name", name);
      return 1;
    } else if (inputStr.includes('logout')) {
      console.log("in logout");
      return 1;
    } else if (inputStr.includes('deposit')) {
      console.log("in deposit");
      return 1;
    } else if (inputStr.includes('transfer')) {
      console.log("in transfer");
      return 1;
    }
  };
  const currentData = inputFields[currentName];
  console.log("currentData", currentData);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), currentData?.inputData?.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Newline, null));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJOZXdsaW5lIiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIkFwcCIsIm5hbWUiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsImN1cnJlbnROYW1lIiwic2V0Q3VycmVudE5hbWUiLCJpbnB1dEZpZWxkcyIsInNldElucHV0RmllbGRzIiwiaW5wdXREYXRhIiwiYmFsYW5jZSIsIm93ZWRNb25leSIsIm93ZWRUbyIsIm93ZWRGcm9tIiwiY3VycmVudElucHV0Iiwic2V0Q3VycmVudElucHV0IiwiaW5wdXQiLCJrZXkiLCJsZWZ0QXJyb3ciLCJyZXR1cm4iLCJjb25zb2xlIiwibG9nIiwidXBkYXRlRGF0YUluU3RhdGUiLCJpbnB1dFN0ciIsImluY2x1ZGVzIiwiaW5kZXhPZiIsInNwbGl0IiwiY3VycmVudERhdGEiLCJtYXAiLCJmaWVsZCIsImluZGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBUZXh0LCBCb3gsIHVzZUlucHV0LCBOZXdsaW5lIH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cbmNvbnN0IEFwcCA9ICh7bmFtZSA9ICdTdHJhbmdlcid9KSA9PiB7XG5cdGNvbnN0IHt1c2VFZmZlY3QsIHVzZVN0YXRlfSA9IFJlYWN0O1xuXHRjb25zdCBbY3VycmVudE5hbWUsIHNldEN1cnJlbnROYW1lXSA9IHVzZVN0YXRlKCdzdHJhbmdlcicpO1xuXHRjb25zdCBbaW5wdXRGaWVsZHMsIHNldElucHV0RmllbGRzXSA9IHVzZVN0YXRlKHtcblx0XHQnc3RyYW5nZXInOiB7XG5cdFx0XHRpbnB1dERhdGE6IFsnJ10sXG5cdFx0XHRiYWxhbmNlOiAwLFxuXHRcdFx0b3dlZE1vbmV5OiAwLFxuXHRcdFx0b3dlZFRvOiAnJyxcblx0XHRcdG93ZWRGcm9tOiAnJyxcblx0XHR9XG5cblx0fSk7XG5cdGNvbnN0IFtjdXJyZW50SW5wdXQsIHNldEN1cnJlbnRJbnB1dF0gPSB1c2VTdGF0ZSgnJyk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblxuXHRcdGlmIChrZXkubGVmdEFycm93KSB7XG5cdFx0XHQvLyBMZWZ0IGFycm93IGtleSBwcmVzc2VkXG5cdFx0fVxuXG5cdFx0aWYoa2V5LnJldHVybikge1xuXHRcdFx0Y29uc29sZS5sb2coXCJydHVybiBrZXkgd2FzIHByZXNzZWRcIiwgY3VycmVudElucHV0KVxuXHRcdFx0dXBkYXRlRGF0YUluU3RhdGUoY3VycmVudElucHV0KVxuXHRcdH1cblxuXHR9KTtcblxuXG5cdGNvbnN0ICB1cGRhdGVEYXRhSW5TdGF0ZSA9IChpbnB1dFN0cikgPT4ge1xuXHRcdGNvbnNvbGUubG9nKFwiY3VycmVudElucHV0IGNhbGxlZCBsaW5lIDMyXCIsIGlucHV0U3RyKVxuXHRcdGNvbnNvbGUubG9nKFwiY3VycmVudElucHV0IGNhbGxlZCBsaW5lIDMzIGlucHV0U3RyLmluY2x1ZGVzKCdsb2dpbicpXCIsIGlucHV0U3RyLmluY2x1ZGVzKCdsb2dpbicpKTtcblx0XHRjb25zb2xlLmxvZyhcImN1cnJlbnRJbnB1dCBjYWxsZWQgbGluZSAzNCBpbnB1dFN0ci5pbmRleE9mKCdsb2dpbicpID4gLVwiLCBpbnB1dFN0ci5pbmRleE9mKCdsb2dpbicpICE9PSAtMSk7XG5cdFx0Ly8gc3dpdGNoIChpbnB1dFN0cikge1xuXHRcdFx0aWYoaW5wdXRTdHIuaW5jbHVkZXMoJ2xvZ2luJykpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBsb2dpblwiKVxuXHRcdFx0XHRjb25zdCBuYW1lID0gaW5wdXRTdHIuc3BsaXQoJyAnKVsxXVxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIm5hbWVcIiwgbmFtZSk7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihpbnB1dFN0ci5pbmNsdWRlcygnbG9nb3V0JykpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBsb2dvdXRcIilcblxuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYoaW5wdXRTdHIuaW5jbHVkZXMoJ2RlcG9zaXQnKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGRlcG9zaXRcIilcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmKGlucHV0U3RyLmluY2x1ZGVzKCd0cmFuc2ZlcicpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gdHJhbnNmZXJcIilcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cdH1cblx0Y29uc3QgY3VycmVudERhdGEgPSBpbnB1dEZpZWxkc1tjdXJyZW50TmFtZV07XG5cdGNvbnNvbGUubG9nKFwiY3VycmVudERhdGFcIiwgY3VycmVudERhdGEpO1xuXHRyZXR1cm4gKFxuXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ30+XG5cdFx0XHQ8Qm94IGJvcmRlclN0eWxlPVwicm91bmRcIiBib3JkZXJDb2xvcj1cImdyZWVuXCI+XG5cdFx0XHRcdDxUZXh0PldlbGNvbWUgPC9UZXh0PlxuXHRcdFx0PC9Cb3g+XG5cdFx0XHR7Y3VycmVudERhdGE/LmlucHV0RGF0YT8ubWFwKChmaWVsZCwgaW5kZXgpPT4ge1xuXHRcdFx0XHRyZXR1cm4oXG5cdFx0XHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ31cblx0XHRcdFx0XHRcdCBrZXk9e2luZGV4fT5cblx0XHRcdFx0XHQ8VGV4dElucHV0XG5cdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj17Jyd9XG5cdFx0XHRcdFx0XHR2YWx1ZT17Y3VycmVudElucHV0fVxuXHRcdFx0XHRcdFx0b25DaGFuZ2U9e3NldEN1cnJlbnRJbnB1dH1cblx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PE5ld2xpbmUgLz5cblx0XHRcdFx0XHRcdHsvKjxUZXh0PntmaWVsZC5vdXRwdXRUZXh0fTwvVGV4dD4qL31cblx0XHRcdFx0XHQ8L0JveD5cblx0XHRcdFx0KVxuXHRcdFx0fSl9XG5cblxuXHRcdDwvQm94PlxuXG5cdClcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxJQUFJO0VBQUVDLEdBQUc7RUFBRUMsUUFBUTtFQUFFQztBQUFRLENBQUMsR0FBR0osT0FBTyxDQUFDLEtBQUssQ0FBQztBQUN2RCxNQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDTSxPQUFPO0FBRW5ELE1BQU1DLEdBQUcsR0FBRyxDQUFDO0VBQUNDLElBQUksR0FBRztBQUFVLENBQUMsS0FBSztFQUNwQyxNQUFNO0lBQUNDLFNBQVM7SUFBRUM7RUFBUSxDQUFDLEdBQUdYLEtBQUs7RUFDbkMsTUFBTSxDQUFDWSxXQUFXLEVBQUVDLGNBQWMsQ0FBQyxHQUFHRixRQUFRLENBQUMsVUFBVSxDQUFDO0VBQzFELE1BQU0sQ0FBQ0csV0FBVyxFQUFFQyxjQUFjLENBQUMsR0FBR0osUUFBUSxDQUFDO0lBQzlDLFVBQVUsRUFBRTtNQUNYSyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUM7TUFDZkMsT0FBTyxFQUFFLENBQUM7TUFDVkMsU0FBUyxFQUFFLENBQUM7TUFDWkMsTUFBTSxFQUFFLEVBQUU7TUFDVkMsUUFBUSxFQUFFO0lBQ1g7RUFFRCxDQUFDLENBQUM7RUFDRixNQUFNLENBQUNDLFlBQVksRUFBRUMsZUFBZSxDQUFDLEdBQUdYLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFFcERQLFFBQVEsQ0FBQyxDQUFDbUIsS0FBSyxFQUFFQyxHQUFHLEtBQUs7SUFFeEIsSUFBSUEsR0FBRyxDQUFDQyxTQUFTLEVBQUU7TUFDbEI7SUFBQTtJQUdELElBQUdELEdBQUcsQ0FBQ0UsTUFBTSxFQUFFO01BQ2RDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHVCQUF1QixFQUFFUCxZQUFZLENBQUM7TUFDbERRLGlCQUFpQixDQUFDUixZQUFZLENBQUM7SUFDaEM7RUFFRCxDQUFDLENBQUM7RUFHRixNQUFPUSxpQkFBaUIsR0FBSUMsUUFBUSxJQUFLO0lBQ3hDSCxPQUFPLENBQUNDLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRUUsUUFBUSxDQUFDO0lBQ3BESCxPQUFPLENBQUNDLEdBQUcsQ0FBQyx3REFBd0QsRUFBRUUsUUFBUSxDQUFDQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakdKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDJEQUEyRCxFQUFFRSxRQUFRLENBQUNFLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMxRztJQUNDLElBQUdGLFFBQVEsQ0FBQ0MsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO01BQzlCSixPQUFPLENBQUNDLEdBQUcsQ0FBQyxVQUFVLENBQUM7TUFDdkIsTUFBTW5CLElBQUksR0FBR3FCLFFBQVEsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUNuQ04sT0FBTyxDQUFDQyxHQUFHLENBQUMsTUFBTSxFQUFFbkIsSUFBSSxDQUFDO01BQ3pCLE9BQU8sQ0FBQztJQUNULENBQUMsTUFDSSxJQUFHcUIsUUFBUSxDQUFDQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7TUFDcENKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFdBQVcsQ0FBQztNQUV4QixPQUFPLENBQUM7SUFDVCxDQUFDLE1BQ0ksSUFBR0UsUUFBUSxDQUFDQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7TUFDckNKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFlBQVksQ0FBQztNQUN6QixPQUFPLENBQUM7SUFDVCxDQUFDLE1BQ0ksSUFBR0UsUUFBUSxDQUFDQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7TUFDdENKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGFBQWEsQ0FBQztNQUMxQixPQUFPLENBQUM7SUFDVDtFQUNGLENBQUM7RUFDRCxNQUFNTSxXQUFXLEdBQUdwQixXQUFXLENBQUNGLFdBQVcsQ0FBQztFQUM1Q2UsT0FBTyxDQUFDQyxHQUFHLENBQUMsYUFBYSxFQUFFTSxXQUFXLENBQUM7RUFDdkMsb0JBRUMsb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBRTtFQUFTLGdCQUM1QixvQkFBQyxHQUFHO0lBQUMsV0FBVyxFQUFDLE9BQU87SUFBQyxXQUFXLEVBQUM7RUFBTyxnQkFDM0Msb0JBQUMsSUFBSSxtQkFBZ0IsQ0FDaEIsRUFDTEEsV0FBVyxFQUFFbEIsU0FBUyxFQUFFbUIsR0FBRyxDQUFDLENBQUNDLEtBQUssRUFBRUMsS0FBSyxLQUFJO0lBQzdDLG9CQUNDLG9CQUFDLEdBQUc7TUFBQyxhQUFhLEVBQUUsUUFBUztNQUMzQixHQUFHLEVBQUVBO0lBQU0sZ0JBQ2Isb0JBQUMsU0FBUztNQUNULFdBQVcsRUFBRSxFQUFHO01BQ2hCLEtBQUssRUFBRWhCLFlBQWE7TUFDcEIsUUFBUSxFQUFFQztJQUFnQixFQUN6QixlQUNELG9CQUFDLE9BQU8sT0FBRyxDQUVOO0VBRVIsQ0FBQyxDQUFDLENBR0c7QUFHUixDQUFDO0FBRURnQixNQUFNLENBQUNDLE9BQU8sR0FBRy9CLEdBQUcifQ==