"use strict";

const React = require('react');
const {
  Text,
  Box,
  useInput,
  Newline
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const dummyInputData = [];
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState({});
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      // updateDataInState(currentInput)
    }
  });

  const getData = name => {
    name = name || currentName;
    return {};
  };
  const createNewNameData = obj => {
    const {
      name,
      balance = 0,
      owedMoney = 0
    } = obj;
    return {
      [name]: {
        inputData: [{
          inputType: 'login',
          inputText: `login ${name}`,
          outputText: `Hello, ${name}! \nYour balance is ${balance}`
        }],
        balance: 0,
        owedMoney: 0,
        owedTo: '',
        owedFrom: ''
      }
    };
  };

  // const  updateDataInState = (inputStr) => {
  // 		if(inputStr.includes('login')) {
  // 			console.log("in login")
  // 			const name = inputStr.split(' ')[1]
  // 			const getDataFromState = getData(name)
  //
  // 			// if(!getDataFromState) {
  // 			// 	const createdData = createNewNameData({name}) ;
  // 			// 	setInputFields({...inputFields, ...createdData})
  // 			// 	setCurrentName(name)
  // 			// 	setCurrentInput('')
  // 			// }
  //
  //
  // 			return 1;
  // 		}
  // 		else if(inputStr.includes('logout')) {
  // 			console.log("in logout")
  //
  // 			return 1;
  // 		}
  // 		else if(inputStr.includes('deposit')) {
  // 			console.log("in deposit")
  // 			const getDataFromState = getData(name)
  // 			return 1;
  // 		}
  // 		else if(inputStr.includes('transfer')) {
  // 			console.log("in transfer")
  // 			return 1;
  // 		}
  // }

  // const currentData = getData();
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }), /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(TextInput, {
    placeholder: '',
    value: currentInput,
    onChange: setCurrentInput
  }), /*#__PURE__*/React.createElement(Newline, null)));
};
module.exports = App;

// const React = require("react");
// const { Text, Box } = require("ink");
// const App = ({ name = "Stranger", from = "London" }) => (
// 	<Box borderStyle="round" borderColor="yellow">
// 		<Text>
// 			Hello,{""}
// 			<Text color="green">
// 				{name} from {from}
// 			</Text>
// 		</Text>
// 	</Box>
// );
// module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJOZXdsaW5lIiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIkFwcCIsIm5hbWUiLCJkdW1teUlucHV0RGF0YSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiY3VycmVudE5hbWUiLCJzZXRDdXJyZW50TmFtZSIsImlucHV0RmllbGRzIiwic2V0SW5wdXRGaWVsZHMiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsInJldHVybiIsImNvbnNvbGUiLCJsb2ciLCJnZXREYXRhIiwiY3JlYXRlTmV3TmFtZURhdGEiLCJvYmoiLCJiYWxhbmNlIiwib3dlZE1vbmV5IiwiaW5wdXREYXRhIiwiaW5wdXRUeXBlIiwiaW5wdXRUZXh0Iiwib3V0cHV0VGV4dCIsIm93ZWRUbyIsIm93ZWRGcm9tIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBUZXh0LCBCb3gsIHVzZUlucHV0LCBOZXdsaW5lIH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cbmNvbnN0IEFwcCA9ICh7bmFtZSA9ICdTdHJhbmdlcid9KSA9PiB7XG5cdGNvbnN0IGR1bW15SW5wdXREYXRhID0gW11cblx0Y29uc3Qge3VzZUVmZmVjdCwgdXNlU3RhdGV9ID0gUmVhY3Q7XG5cdGNvbnN0IFtjdXJyZW50TmFtZSwgc2V0Q3VycmVudE5hbWVdID0gdXNlU3RhdGUoJ3N0cmFuZ2VyJyk7XG5cdGNvbnN0IFtpbnB1dEZpZWxkcywgc2V0SW5wdXRGaWVsZHNdID0gdXNlU3RhdGUoe30pO1xuXHRjb25zdCBbY3VycmVudElucHV0LCBzZXRDdXJyZW50SW5wdXRdID0gdXNlU3RhdGUoJycpO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0aWYoa2V5LnJldHVybikge1xuXHRcdFx0Y29uc29sZS5sb2coXCJydHVybiBrZXkgd2FzIHByZXNzZWRcIiwgY3VycmVudElucHV0KVxuXHRcdFx0Ly8gdXBkYXRlRGF0YUluU3RhdGUoY3VycmVudElucHV0KVxuXHRcdH1cblxuXHR9KTtcblxuXG5cdGNvbnN0IGdldERhdGEgPSAobmFtZSkgPT4ge1xuXHRcdG5hbWUgPSBuYW1lIHx8IGN1cnJlbnROYW1lO1xuXHRcdHJldHVybiB7fVxuXHR9XG5cdGNvbnN0IGNyZWF0ZU5ld05hbWVEYXRhID0gKG9iaikgPT4ge1xuXHRcdGNvbnN0eyBuYW1lLCBiYWxhbmNlID0gMCwgb3dlZE1vbmV5PTB9ID0gb2JqO1xuXHRcdCByZXR1cm4ge1xuXHRcdFx0W25hbWVdIDoge1xuXHRcdFx0XHRpbnB1dERhdGE6IFt7XG5cdFx0XHRcdFx0aW5wdXRUeXBlOiAnbG9naW4nLFxuXHRcdFx0XHRcdGlucHV0VGV4dDogYGxvZ2luICR7bmFtZX1gLFxuXHRcdFx0XHRcdG91dHB1dFRleHQ6IGBIZWxsbywgJHtuYW1lfSEgXFxuWW91ciBiYWxhbmNlIGlzICR7YmFsYW5jZX1gXG5cdFx0XHRcdH1dLFxuXHRcdFx0XHRiYWxhbmNlOjAsXG5cdFx0XHRcdG93ZWRNb25leTogMCxcblx0XHRcdFx0b3dlZFRvOiAnJyxcblx0XHRcdFx0b3dlZEZyb206ICcnLFxuXHRcdFx0fVxuXHRcdH1cblx0XHR9XG5cblxuXHQvLyBjb25zdCAgdXBkYXRlRGF0YUluU3RhdGUgPSAoaW5wdXRTdHIpID0+IHtcblx0Ly8gXHRcdGlmKGlucHV0U3RyLmluY2x1ZGVzKCdsb2dpbicpKSB7XG5cdC8vIFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gbG9naW5cIilcblx0Ly8gXHRcdFx0Y29uc3QgbmFtZSA9IGlucHV0U3RyLnNwbGl0KCcgJylbMV1cblx0Ly8gXHRcdFx0Y29uc3QgZ2V0RGF0YUZyb21TdGF0ZSA9IGdldERhdGEobmFtZSlcblx0Ly9cblx0Ly8gXHRcdFx0Ly8gaWYoIWdldERhdGFGcm9tU3RhdGUpIHtcblx0Ly8gXHRcdFx0Ly8gXHRjb25zdCBjcmVhdGVkRGF0YSA9IGNyZWF0ZU5ld05hbWVEYXRhKHtuYW1lfSkgO1xuXHQvLyBcdFx0XHQvLyBcdHNldElucHV0RmllbGRzKHsuLi5pbnB1dEZpZWxkcywgLi4uY3JlYXRlZERhdGF9KVxuXHQvLyBcdFx0XHQvLyBcdHNldEN1cnJlbnROYW1lKG5hbWUpXG5cdC8vIFx0XHRcdC8vIFx0c2V0Q3VycmVudElucHV0KCcnKVxuXHQvLyBcdFx0XHQvLyB9XG5cdC8vXG5cdC8vXG5cdC8vIFx0XHRcdHJldHVybiAxO1xuXHQvLyBcdFx0fVxuXHQvLyBcdFx0ZWxzZSBpZihpbnB1dFN0ci5pbmNsdWRlcygnbG9nb3V0JykpIHtcblx0Ly8gXHRcdFx0Y29uc29sZS5sb2coXCJpbiBsb2dvdXRcIilcblx0Ly9cblx0Ly8gXHRcdFx0cmV0dXJuIDE7XG5cdC8vIFx0XHR9XG5cdC8vIFx0XHRlbHNlIGlmKGlucHV0U3RyLmluY2x1ZGVzKCdkZXBvc2l0JykpIHtcblx0Ly8gXHRcdFx0Y29uc29sZS5sb2coXCJpbiBkZXBvc2l0XCIpXG5cdC8vIFx0XHRcdGNvbnN0IGdldERhdGFGcm9tU3RhdGUgPSBnZXREYXRhKG5hbWUpXG5cdC8vIFx0XHRcdHJldHVybiAxO1xuXHQvLyBcdFx0fVxuXHQvLyBcdFx0ZWxzZSBpZihpbnB1dFN0ci5pbmNsdWRlcygndHJhbnNmZXInKSkge1xuXHQvLyBcdFx0XHRjb25zb2xlLmxvZyhcImluIHRyYW5zZmVyXCIpXG5cdC8vIFx0XHRcdHJldHVybiAxO1xuXHQvLyBcdFx0fVxuXHQvLyB9XG5cblx0Ly8gY29uc3QgY3VycmVudERhdGEgPSBnZXREYXRhKCk7XG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ30+XG5cdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfT5cblx0XHRcdHsvKntjdXJyZW50RGF0YT8uaW5wdXREYXRhPy5tYXAoKGZpZWxkLCBpbmRleCk9PiB7Ki99XG5cdFx0XHR7LypcdHJldHVybigqL31cblx0XHRcdHsvKlx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfSovfVxuXHRcdFx0ey8qXHRcdFx0IGtleT17aW5kZXh9PiovfVxuXHRcdFx0ey8qXHRcdFx0PFRleHQ+Ki99XG5cdFx0XHR7LypcdFx0XHRcdHtmaWVsZC5pbnB1dFRleHR9Ki99XG5cdFx0XHR7LypcdFx0XHQ8L1RleHQ+Ki99XG5cdFx0XHR7LypcdFx0XHQ8TmV3bGluZSAvPiovfVxuXHRcdFx0ey8qXHRcdFx0PFRleHQ+Ki99XG5cdFx0XHR7LypcdFx0XHRcdHtmaWVsZC5vdXRwdXRUZXh0fSovfVxuXHRcdFx0ey8qXHRcdFx0PC9UZXh0PiovfVxuXHRcdFx0ey8qXHRcdDwvQm94PiovfVxuXHRcdFx0ey8qXHQpKi99XG5cdFx0XHR7Lyp9KX0qL31cblx0XHRcdDwvQm94PlxuXHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ30+XG5cdFx0XHRcdDxUZXh0SW5wdXRcblx0XHRcdFx0XHRwbGFjZWhvbGRlcj17Jyd9XG5cdFx0XHRcdFx0dmFsdWU9e2N1cnJlbnRJbnB1dH1cblx0XHRcdFx0XHRvbkNoYW5nZT17c2V0Q3VycmVudElucHV0fVxuXHRcdFx0XHQvPlxuXHRcdFx0XHQ8TmV3bGluZSAvPlxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdClcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG4vLyBjb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbi8vIGNvbnN0IHsgVGV4dCwgQm94IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuLy8gY29uc3QgQXBwID0gKHsgbmFtZSA9IFwiU3RyYW5nZXJcIiwgZnJvbSA9IFwiTG9uZG9uXCIgfSkgPT4gKFxuLy8gXHQ8Qm94IGJvcmRlclN0eWxlPVwicm91bmRcIiBib3JkZXJDb2xvcj1cInllbGxvd1wiPlxuLy8gXHRcdDxUZXh0PlxuLy8gXHRcdFx0SGVsbG8se1wiXCJ9XG4vLyBcdFx0XHQ8VGV4dCBjb2xvcj1cImdyZWVuXCI+XG4vLyBcdFx0XHRcdHtuYW1lfSBmcm9tIHtmcm9tfVxuLy8gXHRcdFx0PC9UZXh0PlxuLy8gXHRcdDwvVGV4dD5cbi8vIFx0PC9Cb3g+XG4vLyApO1xuLy8gbW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1osTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsSUFBSTtFQUFFQyxHQUFHO0VBQUVDLFFBQVE7RUFBRUM7QUFBUSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDdkQsTUFBTUssU0FBUyxHQUFHTCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ00sT0FBTztBQUVuRCxNQUFNQyxHQUFHLEdBQUcsQ0FBQztFQUFDQyxJQUFJLEdBQUc7QUFBVSxDQUFDLEtBQUs7RUFDcEMsTUFBTUMsY0FBYyxHQUFHLEVBQUU7RUFDekIsTUFBTTtJQUFDQyxTQUFTO0lBQUVDO0VBQVEsQ0FBQyxHQUFHWixLQUFLO0VBQ25DLE1BQU0sQ0FBQ2EsV0FBVyxFQUFFQyxjQUFjLENBQUMsR0FBR0YsUUFBUSxDQUFDLFVBQVUsQ0FBQztFQUMxRCxNQUFNLENBQUNHLFdBQVcsRUFBRUMsY0FBYyxDQUFDLEdBQUdKLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNsRCxNQUFNLENBQUNLLFlBQVksRUFBRUMsZUFBZSxDQUFDLEdBQUdOLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFFcERSLFFBQVEsQ0FBQyxDQUFDZSxLQUFLLEVBQUVDLEdBQUcsS0FBSztJQUN4QixJQUFHQSxHQUFHLENBQUNDLE1BQU0sRUFBRTtNQUNkQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRU4sWUFBWSxDQUFDO01BQ2xEO0lBQ0Q7RUFFRCxDQUFDLENBQUM7O0VBR0YsTUFBTU8sT0FBTyxHQUFJZixJQUFJLElBQUs7SUFDekJBLElBQUksR0FBR0EsSUFBSSxJQUFJSSxXQUFXO0lBQzFCLE9BQU8sQ0FBQyxDQUFDO0VBQ1YsQ0FBQztFQUNELE1BQU1ZLGlCQUFpQixHQUFJQyxHQUFHLElBQUs7SUFDbEMsTUFBSztNQUFFakIsSUFBSTtNQUFFa0IsT0FBTyxHQUFHLENBQUM7TUFBRUMsU0FBUyxHQUFDO0lBQUMsQ0FBQyxHQUFHRixHQUFHO0lBQzNDLE9BQU87TUFDUCxDQUFDakIsSUFBSSxHQUFJO1FBQ1JvQixTQUFTLEVBQUUsQ0FBQztVQUNYQyxTQUFTLEVBQUUsT0FBTztVQUNsQkMsU0FBUyxFQUFHLFNBQVF0QixJQUFLLEVBQUM7VUFDMUJ1QixVQUFVLEVBQUcsVUFBU3ZCLElBQUssdUJBQXNCa0IsT0FBUTtRQUMxRCxDQUFDLENBQUM7UUFDRkEsT0FBTyxFQUFDLENBQUM7UUFDVEMsU0FBUyxFQUFFLENBQUM7UUFDWkssTUFBTSxFQUFFLEVBQUU7UUFDVkMsUUFBUSxFQUFFO01BQ1g7SUFDRCxDQUFDO0VBQ0QsQ0FBQzs7RUFHRjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBLG9CQUNDLG9CQUFDLEdBQUc7SUFBQyxhQUFhLEVBQUU7RUFBUyxnQkFDNUIsb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBRTtFQUFTLEVBZXZCLGVBQ04sb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBRTtFQUFTLGdCQUM1QixvQkFBQyxTQUFTO0lBQ1QsV0FBVyxFQUFFLEVBQUc7SUFDaEIsS0FBSyxFQUFFakIsWUFBYTtJQUNwQixRQUFRLEVBQUVDO0VBQWdCLEVBQ3pCLGVBQ0Ysb0JBQUMsT0FBTyxPQUFHLENBQ04sQ0FDRDtBQUVSLENBQUM7QUFFRGlCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHNUIsR0FBRzs7QUFFcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EifQ==