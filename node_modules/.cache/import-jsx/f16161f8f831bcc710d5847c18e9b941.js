const React = require('react');
const {
  Text,
  Box,
  useInput,
  Newline
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const dummyInputData = [];
  const {
    useEffect,
    useState
  } = React;
  const [currentName, setCurrentName] = useState('stranger');
  const [inputFields, setInputFields] = useState({});
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const getData = name => {
    name = name || currentName;
    return inputFields[name];
  };
  const createNewNameData = obj => {
    const {
      name,
      balance = 0,
      owedMoney = 0
    } = obj;
    return {
      [name]: {
        inputData: [{
          inputType: 'login',
          inputText: `login ${name}`,
          outputText: `Hello, ${name}! \nYour balance is ${balance}`
        }],
        balance: 0,
        owedMoney: 0,
        owedTo: '',
        owedFrom: ''
      }
    };
  };
  const updateDataInState = inputStr => {
    if (inputStr.includes('login')) {
      console.log("in login");
      const name = inputStr.split(' ')[1];
      const getDataFromState = getData(name);

      // if(!getDataFromState) {
      // 	const createdData = createNewNameData({name}) ;
      // 	setInputFields({...inputFields, ...createdData})
      // 	setCurrentName(name)
      // 	setCurrentInput('')
      // }

      return 1;
    } else if (inputStr.includes('logout')) {
      console.log("in logout");
      return 1;
    } else if (inputStr.includes('deposit')) {
      console.log("in deposit");
      const getDataFromState = getData(name);
      return 1;
    } else if (inputStr.includes('transfer')) {
      console.log("in transfer");
      return 1;
    }
  };
  const currentData = getData();
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, currentData?.inputData?.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(Text, null, field.inputText), /*#__PURE__*/React.createElement(Newline, null), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  })), /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(TextInput, {
    placeholder: '',
    value: currentInput,
    onChange: setCurrentInput
  }), /*#__PURE__*/React.createElement(Newline, null)));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJOZXdsaW5lIiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIkFwcCIsIm5hbWUiLCJkdW1teUlucHV0RGF0YSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiY3VycmVudE5hbWUiLCJzZXRDdXJyZW50TmFtZSIsImlucHV0RmllbGRzIiwic2V0SW5wdXRGaWVsZHMiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsInJldHVybiIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGVEYXRhSW5TdGF0ZSIsImdldERhdGEiLCJjcmVhdGVOZXdOYW1lRGF0YSIsIm9iaiIsImJhbGFuY2UiLCJvd2VkTW9uZXkiLCJpbnB1dERhdGEiLCJpbnB1dFR5cGUiLCJpbnB1dFRleHQiLCJvdXRwdXRUZXh0Iiwib3dlZFRvIiwib3dlZEZyb20iLCJpbnB1dFN0ciIsImluY2x1ZGVzIiwic3BsaXQiLCJnZXREYXRhRnJvbVN0YXRlIiwiY3VycmVudERhdGEiLCJtYXAiLCJmaWVsZCIsImluZGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBUZXh0LCBCb3gsIHVzZUlucHV0LCBOZXdsaW5lIH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cbmNvbnN0IEFwcCA9ICh7bmFtZSA9ICdTdHJhbmdlcid9KSA9PiB7XG5cdGNvbnN0IGR1bW15SW5wdXREYXRhID0gW11cblx0Y29uc3Qge3VzZUVmZmVjdCwgdXNlU3RhdGV9ID0gUmVhY3Q7XG5cdGNvbnN0IFtjdXJyZW50TmFtZSwgc2V0Q3VycmVudE5hbWVdID0gdXNlU3RhdGUoJ3N0cmFuZ2VyJyk7XG5cdGNvbnN0IFtpbnB1dEZpZWxkcywgc2V0SW5wdXRGaWVsZHNdID0gdXNlU3RhdGUoe30pO1xuXHRjb25zdCBbY3VycmVudElucHV0LCBzZXRDdXJyZW50SW5wdXRdID0gdXNlU3RhdGUoJycpO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0aWYoa2V5LnJldHVybikge1xuXHRcdFx0Y29uc29sZS5sb2coXCJydHVybiBrZXkgd2FzIHByZXNzZWRcIiwgY3VycmVudElucHV0KVxuXHRcdFx0dXBkYXRlRGF0YUluU3RhdGUoY3VycmVudElucHV0KVxuXHRcdH1cblxuXHR9KTtcblxuXG5cdGNvbnN0IGdldERhdGEgPSAobmFtZSkgPT4ge1xuXHRcdG5hbWUgPSBuYW1lIHx8IGN1cnJlbnROYW1lO1xuXHRcdHJldHVybiBpbnB1dEZpZWxkc1tuYW1lXVxuXHR9XG5cdGNvbnN0IGNyZWF0ZU5ld05hbWVEYXRhID0gKG9iaikgPT4ge1xuXHRcdGNvbnN0eyBuYW1lLCBiYWxhbmNlID0gMCwgb3dlZE1vbmV5PTB9ID0gb2JqO1xuXHRcdCByZXR1cm4ge1xuXHRcdFx0W25hbWVdIDoge1xuXHRcdFx0XHRpbnB1dERhdGE6IFt7XG5cdFx0XHRcdFx0aW5wdXRUeXBlOiAnbG9naW4nLFxuXHRcdFx0XHRcdGlucHV0VGV4dDogYGxvZ2luICR7bmFtZX1gLFxuXHRcdFx0XHRcdG91dHB1dFRleHQ6IGBIZWxsbywgJHtuYW1lfSEgXFxuWW91ciBiYWxhbmNlIGlzICR7YmFsYW5jZX1gXG5cdFx0XHRcdH1dLFxuXHRcdFx0XHRiYWxhbmNlOjAsXG5cdFx0XHRcdG93ZWRNb25leTogMCxcblx0XHRcdFx0b3dlZFRvOiAnJyxcblx0XHRcdFx0b3dlZEZyb206ICcnLFxuXHRcdFx0fVxuXHRcdH1cblx0XHR9XG5cblxuXHRjb25zdCAgdXBkYXRlRGF0YUluU3RhdGUgPSAoaW5wdXRTdHIpID0+IHtcblx0XHRcdGlmKGlucHV0U3RyLmluY2x1ZGVzKCdsb2dpbicpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gbG9naW5cIilcblx0XHRcdFx0Y29uc3QgbmFtZSA9IGlucHV0U3RyLnNwbGl0KCcgJylbMV1cblx0XHRcdFx0Y29uc3QgZ2V0RGF0YUZyb21TdGF0ZSA9IGdldERhdGEobmFtZSlcblxuXHRcdFx0XHQvLyBpZighZ2V0RGF0YUZyb21TdGF0ZSkge1xuXHRcdFx0XHQvLyBcdGNvbnN0IGNyZWF0ZWREYXRhID0gY3JlYXRlTmV3TmFtZURhdGEoe25hbWV9KSA7XG5cdFx0XHRcdC8vIFx0c2V0SW5wdXRGaWVsZHMoey4uLmlucHV0RmllbGRzLCAuLi5jcmVhdGVkRGF0YX0pXG5cdFx0XHRcdC8vIFx0c2V0Q3VycmVudE5hbWUobmFtZSlcblx0XHRcdFx0Ly8gXHRzZXRDdXJyZW50SW5wdXQoJycpXG5cdFx0XHRcdC8vIH1cblxuXG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihpbnB1dFN0ci5pbmNsdWRlcygnbG9nb3V0JykpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBsb2dvdXRcIilcblxuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYoaW5wdXRTdHIuaW5jbHVkZXMoJ2RlcG9zaXQnKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGRlcG9zaXRcIilcblx0XHRcdFx0Y29uc3QgZ2V0RGF0YUZyb21TdGF0ZSA9IGdldERhdGEobmFtZSlcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmKGlucHV0U3RyLmluY2x1ZGVzKCd0cmFuc2ZlcicpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gdHJhbnNmZXJcIilcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cdH1cblxuXHRjb25zdCBjdXJyZW50RGF0YSA9IGdldERhdGEoKTtcblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfT5cblx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj17J2NvbHVtbid9PlxuXHRcdFx0e2N1cnJlbnREYXRhPy5pbnB1dERhdGE/Lm1hcCgoZmllbGQsIGluZGV4KT0+IHtcblx0XHRcdFx0cmV0dXJuKFxuXHRcdFx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj17J2NvbHVtbid9XG5cdFx0XHRcdFx0XHQga2V5PXtpbmRleH0+XG5cdFx0XHRcdFx0XHQ8VGV4dD5cblx0XHRcdFx0XHRcdFx0e2ZpZWxkLmlucHV0VGV4dH1cblx0XHRcdFx0XHRcdDwvVGV4dD5cblx0XHRcdFx0XHRcdDxOZXdsaW5lIC8+XG5cdFx0XHRcdFx0XHQ8VGV4dD5cblx0XHRcdFx0XHRcdFx0e2ZpZWxkLm91dHB1dFRleHR9XG5cdFx0XHRcdFx0XHQ8L1RleHQ+XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdClcblx0XHRcdH0pfVxuXHRcdFx0PC9Cb3g+XG5cdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249eydjb2x1bW4nfT5cblx0XHRcdFx0PFRleHRJbnB1dFxuXHRcdFx0XHRcdHBsYWNlaG9sZGVyPXsnJ31cblx0XHRcdFx0XHR2YWx1ZT17Y3VycmVudElucHV0fVxuXHRcdFx0XHRcdG9uQ2hhbmdlPXtzZXRDdXJyZW50SW5wdXR9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxOZXdsaW5lIC8+XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXSwibWFwcGluZ3MiOiJBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLElBQUk7RUFBRUMsR0FBRztFQUFFQyxRQUFRO0VBQUVDO0FBQVEsQ0FBQyxHQUFHSixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3ZELE1BQU1LLFNBQVMsR0FBR0wsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUNNLE9BQU87QUFFbkQsTUFBTUMsR0FBRyxHQUFHLENBQUM7RUFBQ0MsSUFBSSxHQUFHO0FBQVUsQ0FBQyxLQUFLO0VBQ3BDLE1BQU1DLGNBQWMsR0FBRyxF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