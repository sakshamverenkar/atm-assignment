const React = require('react');
const {
  Text,
  Box,
  useInput
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [inputFields, setInputFields] = useState([{
    inputText: '',
    outputText: ''
  }]);
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    // console.log("currentInput", currentInput, typeof currentInput);
    // console.log("useInput handler called input", input)
    // console.log("useInput handler called key", key)

    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const updateDataInState = inputStr => {
    console.log("currentInput called line 32", inputStr);
    console.log("currentInput called line 33 inputStr.includes('login')", inputStr.includes('login'));
    console.log("currentInput called line 34 inputStr.indexOf('login') > -", inputStr.indexOf('login') > -1);
    switch (inputStr) {
      case inputStr.indexOf('login') !== -1:
        {
          console.log("in login");
          break;
        }
      case inputStr.includes('logout'):
        console.log("in logout");
        break;
      case inputStr.includes('deposit'):
        console.log("in deposit");
        break;
      case inputStr.includes('transfer'):
        console.log("in trasnfer");
        break;
      default:
        console.log("in break");
    }
  };
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), inputFields.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiQXBwIiwibmFtZSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiaW5wdXRGaWVsZHMiLCJzZXRJbnB1dEZpZWxkcyIsImlucHV0VGV4dCIsIm91dHB1dFRleHQiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsImxlZnRBcnJvdyIsInJldHVybiIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGVEYXRhSW5TdGF0ZSIsImlucHV0U3RyIiwiaW5jbHVkZXMiLCJpbmRleE9mIiwibWFwIiwiZmllbGQiLCJpbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1aS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgVGV4dCwgQm94LCB1c2VJbnB1dCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoXCJpbmstdGV4dC1pbnB1dFwiKS5kZWZhdWx0O1xuXG5jb25zdCBBcHAgPSAoe25hbWUgPSAnU3RyYW5nZXInfSkgPT4ge1xuXHRjb25zdCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gPSBSZWFjdDtcblx0Y29uc3QgW2lucHV0RmllbGRzLCBzZXRJbnB1dEZpZWxkc10gPSB1c2VTdGF0ZShbe1xuXHRcdGlucHV0VGV4dDogJycsXG5cdFx0b3V0cHV0VGV4dDogJydcblx0fV0pO1xuXHRjb25zdCBbY3VycmVudElucHV0LCBzZXRDdXJyZW50SW5wdXRdID0gdXNlU3RhdGUoJycpO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCJjdXJyZW50SW5wdXRcIiwgY3VycmVudElucHV0LCB0eXBlb2YgY3VycmVudElucHV0KTtcblx0XHQvLyBjb25zb2xlLmxvZyhcInVzZUlucHV0IGhhbmRsZXIgY2FsbGVkIGlucHV0XCIsIGlucHV0KVxuXHRcdC8vIGNvbnNvbGUubG9nKFwidXNlSW5wdXQgaGFuZGxlciBjYWxsZWQga2V5XCIsIGtleSlcblxuXG5cdFx0aWYgKGtleS5sZWZ0QXJyb3cpIHtcblx0XHRcdC8vIExlZnQgYXJyb3cga2V5IHByZXNzZWRcblx0XHR9XG5cblx0XHRpZihrZXkucmV0dXJuKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcInJ0dXJuIGtleSB3YXMgcHJlc3NlZFwiLCBjdXJyZW50SW5wdXQpXG5cdFx0XHR1cGRhdGVEYXRhSW5TdGF0ZShjdXJyZW50SW5wdXQpXG5cdFx0fVxuXG5cdH0pO1xuXG5cdGNvbnN0ICB1cGRhdGVEYXRhSW5TdGF0ZSA9IChpbnB1dFN0cikgPT4ge1xuXHRcdGNvbnNvbGUubG9nKFwiY3VycmVudElucHV0IGNhbGxlZCBsaW5lIDMyXCIsIGlucHV0U3RyKVxuXHRcdGNvbnNvbGUubG9nKFwiY3VycmVudElucHV0IGNhbGxlZCBsaW5lIDMzIGlucHV0U3RyLmluY2x1ZGVzKCdsb2dpbicpXCIsIGlucHV0U3RyLmluY2x1ZGVzKCdsb2dpbicpKTtcblx0XHRjb25zb2xlLmxvZyhcImN1cnJlbnRJbnB1dCBjYWxsZWQgbGluZSAzNCBpbnB1dFN0ci5pbmRleE9mKCdsb2dpbicpID4gLVwiLCBpbnB1dFN0ci5pbmRleE9mKCdsb2dpbicpID4gLTEpO1xuXHRcdHN3aXRjaCAoaW5wdXRTdHIpIHtcblx0XHRcdGNhc2UgKGlucHV0U3RyLmluZGV4T2YoJ2xvZ2luJykgIT09IC0xICk6IHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBsb2dpblwiKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0Y2FzZSBpbnB1dFN0ci5pbmNsdWRlcygnbG9nb3V0Jyk6XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gbG9nb3V0XCIpXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBpbnB1dFN0ci5pbmNsdWRlcygnZGVwb3NpdCcpOlxuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGRlcG9zaXRcIilcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIGlucHV0U3RyLmluY2x1ZGVzKCd0cmFuc2ZlcicpOlxuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIHRyYXNuZmVyXCIpXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBicmVha1wiKVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ30+XG5cdFx0XHQ8Qm94IGJvcmRlclN0eWxlPVwicm91bmRcIiBib3JkZXJDb2xvcj1cImdyZWVuXCI+XG5cdFx0XHRcdDxUZXh0PldlbGNvbWUgPC9UZXh0PlxuXHRcdFx0PC9Cb3g+XG5cdFx0XHR7aW5wdXRGaWVsZHMubWFwKChmaWVsZCwgaW5kZXgpPT4ge1xuXHRcdFx0XHRyZXR1cm4oXG5cdFx0XHRcdFx0PEJveCBmbGV4RGlyZWN0aW9uPXsnY29sdW1uJ31cblx0XHRcdFx0XHRcdCBrZXk9e2luZGV4fT5cblx0XHRcdFx0XHQ8VGV4dElucHV0XG5cdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj17Jyd9XG5cdFx0XHRcdFx0XHR2YWx1ZT17Y3VycmVudElucHV0fVxuXHRcdFx0XHRcdFx0b25DaGFuZ2U9e3NldEN1cnJlbnRJbnB1dH1cblx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PFRleHQ+e2ZpZWxkLm91dHB1dFRleHR9PC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQpXG5cdFx0XHR9KX1cblxuXG5cdFx0PC9Cb3g+XG5cblx0KVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXSwibWFwcGluZ3MiOiJBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLElBQUk7RUFBRUMsR0FBRztFQUFFQztBQUFTLENBQUMsR0FBR0gsT0FBTyxD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