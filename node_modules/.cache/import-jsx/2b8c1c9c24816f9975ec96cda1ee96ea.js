const React = require('react');
const {
  Text,
  Box,
  useInput
} = require("ink");
const TextInput = require("ink-text-input").default;
const App = ({
  name = 'Stranger'
}) => {
  const {
    useEffect,
    useState
  } = React;
  const [inputFields, setInputFields] = useState([{
    inputText: '',
    outputText: ''
  }]);
  const [currentInput, setCurrentInput] = useState('');
  useInput((input, key) => {
    // console.log("currentInput", currentInput, typeof currentInput);
    // console.log("useInput handler called input", input)
    // console.log("useInput handler called key", key)

    if (key.leftArrow) {
      // Left arrow key pressed
    }
    if (key.return) {
      console.log("rturn key was pressed", currentInput);
      updateDataInState(currentInput);
    }
  });
  const updateDataInState = inputStr => {
    console.log("currentInput called line 32", inputStr);
    switch (inputStr) {
      case inputStr.includes('login'):
        console.log("in login");
        break;
      case inputStr.includes('logout'):
        console.log("in logout");
        break;
      case inputStr.includes('deposit'):
        console.log("in deposit");
        break;
      case inputStr.includes('transfer'):
        console.log("in trasnfer");
        break;
      default:
        console.log("in break");
    }
  };
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: 'column'
  }, /*#__PURE__*/React.createElement(Box, {
    borderStyle: "round",
    borderColor: "green"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome ")), inputFields.map((field, index) => {
    return /*#__PURE__*/React.createElement(Box, {
      flexDirection: 'column',
      key: index
    }, /*#__PURE__*/React.createElement(TextInput, {
      placeholder: '',
      value: currentInput,
      onChange: setCurrentInput
    }), /*#__PURE__*/React.createElement(Text, null, field.outputText));
  }));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlSW5wdXQiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiQXBwIiwibmFtZSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiaW5wdXRGaWVsZHMiLCJzZXRJbnB1dEZpZWxkcyIsImlucHV0VGV4dCIsIm91dHB1dFRleHQiLCJjdXJyZW50SW5wdXQiLCJzZXRDdXJyZW50SW5wdXQiLCJpbnB1dCIsImtleSIsImxlZnRBcnJvdyIsInJldHVybiIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGVEYXRhSW5TdGF0ZSIsImlucHV0U3RyIiwiaW5jbHVkZXMiLCJtYXAiLCJmaWVsZCIsImluZGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBUZXh0LCBCb3gsIHVzZUlucHV0IH0gPSByZXF1aXJlKFwiaW5rXCIpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cbmNvbnN0IEFwcCA9ICh7bmFtZSA9ICdTdHJhbmdlcid9KSA9PiB7XG5cdGNvbnN0IHt1c2VFZmZlY3QsIHVzZVN0YXRlfSA9IFJlYWN0O1xuXHRjb25zdCBbaW5wdXRGaWVsZHMsIHNldElucHV0RmllbGRzXSA9IHVzZVN0YXRlKFt7XG5cdFx0aW5wdXRUZXh0OiAnJyxcblx0XHRvdXRwdXRUZXh0OiAnJ1xuXHR9XSk7XG5cdGNvbnN0IFtjdXJyZW50SW5wdXQsIHNldEN1cnJlbnRJbnB1dF0gPSB1c2VTdGF0ZSgnJyk7XG5cblx0dXNlSW5wdXQoKGlucHV0LCBrZXkpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcImN1cnJlbnRJbnB1dFwiLCBjdXJyZW50SW5wdXQsIHR5cGVvZiBjdXJyZW50SW5wdXQpO1xuXHRcdC8vIGNvbnNvbGUubG9nKFwidXNlSW5wdXQgaGFuZGxlciBjYWxsZWQgaW5wdXRcIiwgaW5wdXQpXG5cdFx0Ly8gY29uc29sZS5sb2coXCJ1c2VJbnB1dCBoYW5kbGVyIGNhbGxlZCBrZXlcIiwga2V5KVxuXG5cblx0XHRpZiAoa2V5LmxlZnRBcnJvdykge1xuXHRcdFx0Ly8gTGVmdCBhcnJvdyBrZXkgcHJlc3NlZFxuXHRcdH1cblxuXHRcdGlmKGtleS5yZXR1cm4pIHtcblx0XHRcdGNvbnNvbGUubG9nKFwicnR1cm4ga2V5IHdhcyBwcmVzc2VkXCIsIGN1cnJlbnRJbnB1dClcblx0XHRcdHVwZGF0ZURhdGFJblN0YXRlKGN1cnJlbnRJbnB1dClcblx0XHR9XG5cblx0fSk7XG5cblx0Y29uc3QgIHVwZGF0ZURhdGFJblN0YXRlID0gKGlucHV0U3RyKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coXCJjdXJyZW50SW5wdXQgY2FsbGVkIGxpbmUgMzJcIiwgaW5wdXRTdHIpXG5cdFx0c3dpdGNoIChpbnB1dFN0cikge1xuXHRcdFx0Y2FzZSBpbnB1dFN0ci5pbmNsdWRlcygnbG9naW4nKTpcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBsb2dpblwiKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgaW5wdXRTdHIuaW5jbHVkZXMoJ2xvZ291dCcpOlxuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluIGxvZ291dFwiKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgaW5wdXRTdHIuaW5jbHVkZXMoJ2RlcG9zaXQnKTpcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiBkZXBvc2l0XCIpXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBpbnB1dFN0ci5pbmNsdWRlcygndHJhbnNmZXInKTpcblx0XHRcdFx0Y29uc29sZS5sb2coXCJpbiB0cmFzbmZlclwiKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiaW4gYnJlYWtcIilcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj17J2NvbHVtbid9PlxuXHRcdFx0PEJveCBib3JkZXJTdHlsZT1cInJvdW5kXCIgYm9yZGVyQ29sb3I9XCJncmVlblwiPlxuXHRcdFx0XHQ8VGV4dD5XZWxjb21lIDwvVGV4dD5cblx0XHRcdDwvQm94PlxuXHRcdFx0e2lucHV0RmllbGRzLm1hcCgoZmllbGQsIGluZGV4KT0+IHtcblx0XHRcdFx0cmV0dXJuKFxuXHRcdFx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj17J2NvbHVtbid9XG5cdFx0XHRcdFx0XHQga2V5PXtpbmRleH0+XG5cdFx0XHRcdFx0PFRleHRJbnB1dFxuXHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9eycnfVxuXHRcdFx0XHRcdFx0dmFsdWU9e2N1cnJlbnRJbnB1dH1cblx0XHRcdFx0XHRcdG9uQ2hhbmdlPXtzZXRDdXJyZW50SW5wdXR9XG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdDxUZXh0PntmaWVsZC5vdXRwdXRUZXh0fTwvVGV4dD5cblx0XHRcdFx0XHQ8L0JveD5cblx0XHRcdFx0KVxuXHRcdFx0fSl9XG5cblxuXHRcdDwvQm94PlxuXG5cdClcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxJQUFJO0VBQUVDLEdBQUc7RUFBRUM7QUFBUyxDQUFDLEdBQUdILE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDOUMsTUFBTUksU0FBUyxHQUFHSixPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ0ssT0FBTztBQUVuRCxNQUFNQyxHQUFHLEdBQUcsQ0FBQztFQUFDQyxJQUFJLEdBQUc7QUFBVSxDQUFDLEtBQUs7RUFDcEMsTUFBTTtJQUFDQyxTQUFTO0lBQUVDO0VBQVEsQ0FBQyxHQUFHVixLQUFLO0VBQ25DLE1BQU0sQ0FBQ1csV0FBVyxFQUFFQyxjQUFjLENBQUMsR0FBR0YsUUFBUSxDQUFDLENBQUM7SUFDL0NHLFNBQVMsRUFBRSxFQUFFO0lBQ2JDLFVBQVUsRUFBRTtFQUNiLENBQUMsQ0FBQyxDQUFDO0VBQ0gsTUFBTSxDQUFDQyxZQUFZLEVBQUVDLGVBQWUsQ0FBQyxHQUFHTixRQUFRLENBQUMsRUFBRSxDQUFDO0VBRXBETixRQUFRLENBQUMsQ0FBQ2EsS0FBSyxFQUFFQyxHQUFHLEtBQUs7SUFDeEI7SUFDQTtJQUNBOztJQUdBLElBQUlBLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFO01BQ2xCO0lBQUE7SUFHRCxJQUFHRCxHQUFHLENBQUNFLE1BQU0sRUFBRTtNQUNkQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRVAsWUFBWSxDQUFDO01BQ2xEUSxpQkFBaUIsQ0FBQ1IsWUFBWSxDQUFDO0lBQ2hDO0VBRUQsQ0FBQyxDQUFDO0VBRUYsTUFBT1EsaUJBQWlCLEdBQUlDLFFBQVEsSUFBSztJQUN4Q0gsT0FBTyxDQUFDQyxHQUFHLENBQUMsNkJBQTZCLEVBQUVFLFFBQVEsQ0FBQztJQUNwRCxRQUFRQSxRQUFRO01BQ2YsS0FBS0EsUUFBUSxDQUFDQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQzlCSixPQUFPLENBQUNDLEdBQUcsQ0FBQyxVQUFVLENBQUM7UUFDdkI7TUFDRCxLQUFLRSxRQUFRLENBQUNDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDL0JKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFdBQVcsQ0FBQztRQUN4QjtNQUNELEtBQUtFLFFBQVEsQ0FBQ0MsUUFBUSxDQUFDLFNBQVMsQ0FBQztRQUNoQ0osT0FBTyxDQUFDQyxHQUFHLENBQUMsWUFBWSxDQUFDO1FBQ3pCO01BQ0QsS0FBS0UsUUFBUSxDQUFDQyxRQUFRLENBQUMsVUFBVSxDQUFDO1FBQ2pDSixPQUFPLENBQUNDLEdBQUcsQ0FBQyxhQUFhLENBQUM7UUFDMUI7TUFDRDtRQUNDRCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxVQUFVLENBQUM7SUFBQTtFQUUxQixDQUFDO0VBRUQsb0JBQ0Msb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBRTtFQUFTLGdCQUM1QixvQkFBQyxHQUFHO0lBQUMsV0FBVyxFQUFDLE9BQU87SUFBQyxXQUFXLEVBQUM7RUFBTyxnQkFDM0Msb0JBQUMsSUFBSSxtQkFBZ0IsQ0FDaEIsRUFDTFgsV0FBVyxDQUFDZSxHQUFHLENBQUMsQ0FBQ0MsS0FBSyxFQUFFQyxLQUFLLEtBQUk7SUFDakMsb0JBQ0Msb0JBQUMsR0FBRztNQUFDLGFBQWEsRUFBRSxRQUFTO01BQzNCLEdBQUcsRUFBRUE7SUFBTSxnQkFDYixvQkFBQyxTQUFTO01BQ1QsV0FBVyxFQUFFLEVBQUc7TUFDaEIsS0FBSyxFQUFFYixZQUFhO01BQ3BCLFFBQVEsRUFBRUM7SUFBZ0IsRUFDekIsZUFDRCxvQkFBQyxJQUFJLFFBQUVXLEtBQUssQ0FBQ2IsVUFBVSxDQUFRLENBQzFCO0VBRVIsQ0FBQyxDQUFDLENBR0c7QUFHUixDQUFDO0FBRURlLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHdkIsR0FBRyJ9